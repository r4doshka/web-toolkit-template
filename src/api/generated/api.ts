/* tslint:disable */
/* eslint-disable */
/**
 * NestJS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AdminCreateCrudDto
 */
export interface AdminCreateCrudDto {
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof AdminCreateCrudDto
   */
  role: AdminCreateCrudDtoRoleEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AdminCreateCrudDtoRoleEnum {
  Admin = 'admin',
  SuperAdmin = 'super_admin',
}

/**
 *
 * @export
 * @interface AdminDto
 */
export interface AdminDto {
  /**
   *
   * @type {string}
   * @memberof AdminDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AdminDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof AdminDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof AdminDto
   */
  role: AdminDtoRoleEnum;
  /**
   *
   * @type {string}
   * @memberof AdminDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AdminDto
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof AdminDto
   */
  lastName: string;
}

/**
 * @export
 * @enum {string}
 */
export enum AdminDtoRoleEnum {
  Admin = 'admin',
  SuperAdmin = 'super_admin',
}

/**
 *
 * @export
 * @interface AdminSignInBodyDto
 */
export interface AdminSignInBodyDto {
  /**
   *
   * @type {string}
   * @memberof AdminSignInBodyDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AdminSignInBodyDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface AdminUpdateCrudDto
 */
export interface AdminUpdateCrudDto {
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  role: AdminUpdateCrudDtoRoleEnum;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof AdminUpdateCrudDto
   */
  updatedAt: string;
}

/**
 * @export
 * @enum {string}
 */
export enum AdminUpdateCrudDtoRoleEnum {
  Admin = 'admin',
  SuperAdmin = 'super_admin',
}

/**
 *
 * @export
 * @interface AuthAdminDto
 */
export interface AuthAdminDto {
  /**
   *
   * @type {AdminDto}
   * @memberof AuthAdminDto
   */
  user: AdminDto;
  /**
   *
   * @type {string}
   * @memberof AuthAdminDto
   */
  token: string;
}
/**
 *
 * @export
 * @interface AuthCustomerDto
 */
export interface AuthCustomerDto {
  /**
   *
   * @type {CustomerDto}
   * @memberof AuthCustomerDto
   */
  user: CustomerDto;
  /**
   *
   * @type {string}
   * @memberof AuthCustomerDto
   */
  token: string;
}
/**
 *
 * @export
 * @interface BrickPrice
 */
export interface BrickPrice {
  /**
   *
   * @type {Property}
   * @memberof BrickPrice
   */
  property?: Property;
  /**
   *
   * @type {string}
   * @memberof BrickPrice
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof BrickPrice
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BrickPrice
   */
  createdAt: string;
  /**
   *
   * @type {number}
   * @memberof BrickPrice
   */
  value: number;
}
/**
 *
 * @export
 * @interface BrickPriceCreateCrudDto
 */
export interface BrickPriceCreateCrudDto {
  /**
   *
   * @type {string}
   * @memberof BrickPriceCreateCrudDto
   */
  propertyId: string;
  /**
   *
   * @type {number}
   * @memberof BrickPriceCreateCrudDto
   */
  value: number;
}
/**
 *
 * @export
 * @interface BrickPriceDto
 */
export interface BrickPriceDto {
  /**
   *
   * @type {string}
   * @memberof BrickPriceDto
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof BrickPriceDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BrickPriceDto
   */
  createdAt: string;
  /**
   *
   * @type {number}
   * @memberof BrickPriceDto
   */
  value: number;
}
/**
 *
 * @export
 * @interface BricksTransaction
 */
export interface BricksTransaction {
  /**
   *
   * @type {Customer}
   * @memberof BricksTransaction
   */
  customer?: Customer;
  /**
   *
   * @type {string}
   * @memberof BricksTransaction
   */
  customerId: string;
  /**
   *
   * @type {Property}
   * @memberof BricksTransaction
   */
  property?: Property;
  /**
   *
   * @type {string}
   * @memberof BricksTransaction
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransaction
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransaction
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransaction
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransaction
   */
  kind: BricksTransactionKindEnum;
  /**
   *
   * @type {number}
   * @memberof BricksTransaction
   */
  value: number;
  /**
   *
   * @type {number}
   * @memberof BricksTransaction
   */
  balance: number;
  /**
   *
   * @type {number}
   * @memberof BricksTransaction
   */
  brickPrice: number;
}

/**
 * @export
 * @enum {string}
 */
export enum BricksTransactionKindEnum {
  Purchase = 'purchase',
  Sale = 'sale',
}

/**
 *
 * @export
 * @interface BricksTransactionCreateDto
 */
export interface BricksTransactionCreateDto {
  /**
   *
   * @type {string}
   * @memberof BricksTransactionCreateDto
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransactionCreateDto
   */
  kind: BricksTransactionCreateDtoKindEnum;
  /**
   *
   * @type {number}
   * @memberof BricksTransactionCreateDto
   */
  value: number;
}

/**
 * @export
 * @enum {string}
 */
export enum BricksTransactionCreateDtoKindEnum {
  Purchase = 'purchase',
  Sale = 'sale',
}

/**
 *
 * @export
 * @interface BricksTransactionDto
 */
export interface BricksTransactionDto {
  /**
   *
   * @type {string}
   * @memberof BricksTransactionDto
   */
  customerId: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransactionDto
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransactionDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransactionDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransactionDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof BricksTransactionDto
   */
  kind: BricksTransactionDtoKindEnum;
  /**
   *
   * @type {number}
   * @memberof BricksTransactionDto
   */
  value: number;
  /**
   *
   * @type {number}
   * @memberof BricksTransactionDto
   */
  balance: number;
  /**
   *
   * @type {number}
   * @memberof BricksTransactionDto
   */
  brickPrice: number;
}

/**
 * @export
 * @enum {string}
 */
export enum BricksTransactionDtoKindEnum {
  Purchase = 'purchase',
  Sale = 'sale',
}

/**
 *
 * @export
 * @interface Customer
 */
export interface Customer {
  /**
   *
   * @type {Array<PaymentMethod>}
   * @memberof Customer
   */
  paymentMethods?: Array<PaymentMethod>;
  /**
   *
   * @type {Array<WalletTransaction>}
   * @memberof Customer
   */
  walletTransactions?: Array<WalletTransaction>;
  /**
   *
   * @type {Array<BricksTransaction>}
   * @memberof Customer
   */
  bricksTransactions?: Array<BricksTransaction>;
  /**
   *
   * @type {Array<WalletRequest>}
   * @memberof Customer
   */
  walletRequests?: Array<WalletRequest>;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  role: CustomerRoleEnum;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof Customer
   */
  stripeCustomerId?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum CustomerRoleEnum {
  Customer = 'customer',
}

/**
 *
 * @export
 * @interface CustomerAddCardDto
 */
export interface CustomerAddCardDto {
  /**
   *
   * @type {string}
   * @memberof CustomerAddCardDto
   */
  paymentMethodId: string;
}
/**
 *
 * @export
 * @interface CustomerBalanceDto
 */
export interface CustomerBalanceDto {
  /**
   *
   * @type {number}
   * @memberof CustomerBalanceDto
   */
  balance: number;
}
/**
 *
 * @export
 * @interface CustomerChartDto
 */
export interface CustomerChartDto {
  /**
   *
   * @type {string}
   * @memberof CustomerChartDto
   */
  month: string;
  /**
   *
   * @type {number}
   * @memberof CustomerChartDto
   */
  value: number;
}
/**
 *
 * @export
 * @interface CustomerDto
 */
export interface CustomerDto {
  /**
   *
   * @type {string}
   * @memberof CustomerDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CustomerDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof CustomerDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof CustomerDto
   */
  role: CustomerDtoRoleEnum;
  /**
   *
   * @type {string}
   * @memberof CustomerDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CustomerDto
   */
  stripeCustomerId?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum CustomerDtoRoleEnum {
  Customer = 'customer',
}

/**
 *
 * @export
 * @interface CustomerPaymentIntentDto
 */
export interface CustomerPaymentIntentDto {
  /**
   *
   * @type {number}
   * @memberof CustomerPaymentIntentDto
   */
  amount: number;
  /**
   *
   * @type {string}
   * @memberof CustomerPaymentIntentDto
   */
  paymentMethodId: string;
}
/**
 *
 * @export
 * @interface CustomerPendingPropertyResDto
 */
export interface CustomerPendingPropertyResDto {
  /**
   *
   * @type {number}
   * @memberof CustomerPendingPropertyResDto
   */
  purchaseValue: number;
}
/**
 *
 * @export
 * @interface CustomerProfileCreateDto
 */
export interface CustomerProfileCreateDto {
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  sex: CustomerProfileCreateDtoSexEnum;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  dateOfBirth: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  phoneCode: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  countryOfBirth: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  cityOfBirth: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  citizenship: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  postcode: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  country: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  identifyDocument?: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileCreateDto
   */
  proofOfAddress?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum CustomerProfileCreateDtoSexEnum {
  Man = 'man',
  Woman = 'woman',
  Other = 'other',
}

/**
 *
 * @export
 * @interface CustomerProfileDto
 */
export interface CustomerProfileDto {
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  dateOfBirth: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  sex: CustomerProfileDtoSexEnum;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  phoneCode: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  countryOfBirth: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  cityOfBirth: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  citizenship: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  postcode: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  country: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  customerId: string;
  /**
   *
   * @type {number}
   * @memberof CustomerProfileDto
   */
  balance: number;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  identifyDocument: string;
  /**
   *
   * @type {string}
   * @memberof CustomerProfileDto
   */
  proofOfAddress: string;
}

/**
 * @export
 * @enum {string}
 */
export enum CustomerProfileDtoSexEnum {
  Man = 'man',
  Woman = 'woman',
  Other = 'other',
}

/**
 *
 * @export
 * @interface CustomerPropertiesChartDto
 */
export interface CustomerPropertiesChartDto {
  /**
   *
   * @type {string}
   * @memberof CustomerPropertiesChartDto
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertiesChartDto
   */
  percent: number;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertiesChartDto
   */
  price: number;
  /**
   *
   * @type {string}
   * @memberof CustomerPropertiesChartDto
   */
  id: string;
}
/**
 *
 * @export
 * @interface CustomerPropertyResDto
 */
export interface CustomerPropertyResDto {
  /**
   *
   * @type {number}
   * @memberof CustomerPropertyResDto
   */
  purchaseValue: number;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertyResDto
   */
  totalDividendsReceived: number;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertyResDto
   */
  currentValue: number;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertyResDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertyResDto
   */
  totalPercent: number;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertyResDto
   */
  currentValuePercent: number;
  /**
   *
   * @type {number}
   * @memberof CustomerPropertyResDto
   */
  totalDividendsReceivedPercent: number;
}
/**
 *
 * @export
 * @interface CustomerRecoveryPasswordDto
 */
export interface CustomerRecoveryPasswordDto {
  /**
   *
   * @type {string}
   * @memberof CustomerRecoveryPasswordDto
   */
  email: string;
}
/**
 *
 * @export
 * @interface CustomerSignedUrlDocumentBodyDto
 */
export interface CustomerSignedUrlDocumentBodyDto {
  /**
   *
   * @type {string}
   * @memberof CustomerSignedUrlDocumentBodyDto
   */
  filename: string;
}
/**
 *
 * @export
 * @interface CustomerSigninBodyDto
 */
export interface CustomerSigninBodyDto {
  /**
   *
   * @type {string}
   * @memberof CustomerSigninBodyDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CustomerSigninBodyDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface CustomerUpdateDto
 */
export interface CustomerUpdateDto {
  /**
   *
   * @type {string}
   * @memberof CustomerUpdateDto
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof CustomerUpdateDto
   */
  password?: string;
}
/**
 *
 * @export
 * @interface DashboardStatisticDto
 */
export interface DashboardStatisticDto {
  /**
   *
   * @type {number}
   * @memberof DashboardStatisticDto
   */
  totalValueOfMyBricks: number;
  /**
   *
   * @type {number}
   * @memberof DashboardStatisticDto
   */
  totalValueOfMyBricksPercent: number;
  /**
   *
   * @type {number}
   * @memberof DashboardStatisticDto
   */
  totalDividendsReceived: number;
  /**
   *
   * @type {number}
   * @memberof DashboardStatisticDto
   */
  totalDividendsReceivedPercent: number;
  /**
   *
   * @type {number}
   * @memberof DashboardStatisticDto
   */
  totalEarnedAmount: number;
  /**
   *
   * @type {number}
   * @memberof DashboardStatisticDto
   */
  totalEarnedAmountPercent: number;
  /**
   *
   * @type {number}
   * @memberof DashboardStatisticDto
   */
  numberOfPropertiesInvestedIn: number;
  /**
   *
   * @type {Array<CustomerPropertiesChartDto>}
   * @memberof DashboardStatisticDto
   */
  chart: Array<CustomerPropertiesChartDto>;
}
/**
 *
 * @export
 * @interface GetManyAdminDtoResponseDto
 */
export interface GetManyAdminDtoResponseDto {
  /**
   *
   * @type {Array<AdminDto>}
   * @memberof GetManyAdminDtoResponseDto
   */
  data: Array<AdminDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyAdminDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyAdminDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyAdminDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyAdminDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyBrickPriceDtoResponseDto
 */
export interface GetManyBrickPriceDtoResponseDto {
  /**
   *
   * @type {Array<BrickPriceDto>}
   * @memberof GetManyBrickPriceDtoResponseDto
   */
  data: Array<BrickPriceDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyBrickPriceDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyBrickPriceDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyBrickPriceDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyBrickPriceDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyCustomerDtoResponseDto
 */
export interface GetManyCustomerDtoResponseDto {
  /**
   *
   * @type {Array<CustomerDto>}
   * @memberof GetManyCustomerDtoResponseDto
   */
  data: Array<CustomerDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyCustomerProfileDtoResponseDto
 */
export interface GetManyCustomerProfileDtoResponseDto {
  /**
   *
   * @type {Array<CustomerProfileDto>}
   * @memberof GetManyCustomerProfileDtoResponseDto
   */
  data: Array<CustomerProfileDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerProfileDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerProfileDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerProfileDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyCustomerProfileDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyPropertyAdvantagesDtoResponseDto
 */
export interface GetManyPropertyAdvantagesDtoResponseDto {
  /**
   *
   * @type {Array<PropertyAdvantagesDto>}
   * @memberof GetManyPropertyAdvantagesDtoResponseDto
   */
  data: Array<PropertyAdvantagesDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyAdvantagesDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyAdvantagesDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyAdvantagesDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyAdvantagesDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyPropertyDividendsDtoResponseDto
 */
export interface GetManyPropertyDividendsDtoResponseDto {
  /**
   *
   * @type {Array<PropertyDividendsDto>}
   * @memberof GetManyPropertyDividendsDtoResponseDto
   */
  data: Array<PropertyDividendsDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDividendsDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDividendsDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDividendsDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDividendsDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyPropertyDtoResponseDto
 */
export interface GetManyPropertyDtoResponseDto {
  /**
   *
   * @type {Array<PropertyDto>}
   * @memberof GetManyPropertyDtoResponseDto
   */
  data: Array<PropertyDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyPropertyMonthlyUpdateDtoResponseDto
 */
export interface GetManyPropertyMonthlyUpdateDtoResponseDto {
  /**
   *
   * @type {Array<PropertyMonthlyUpdateDto>}
   * @memberof GetManyPropertyMonthlyUpdateDtoResponseDto
   */
  data: Array<PropertyMonthlyUpdateDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyMonthlyUpdateDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyMonthlyUpdateDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyMonthlyUpdateDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyPropertyMonthlyUpdateDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyWalletRequestDtoResponseDto
 */
export interface GetManyWalletRequestDtoResponseDto {
  /**
   *
   * @type {Array<WalletRequestDto>}
   * @memberof GetManyWalletRequestDtoResponseDto
   */
  data: Array<WalletRequestDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletRequestDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletRequestDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletRequestDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletRequestDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface GetManyWalletTransactionDtoResponseDto
 */
export interface GetManyWalletTransactionDtoResponseDto {
  /**
   *
   * @type {Array<WalletTransactionDto>}
   * @memberof GetManyWalletTransactionDtoResponseDto
   */
  data: Array<WalletTransactionDto>;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletTransactionDtoResponseDto
   */
  count: number;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletTransactionDtoResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletTransactionDtoResponseDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof GetManyWalletTransactionDtoResponseDto
   */
  pageCount: number;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse200
   */
  status?: string;
  /**
   *
   * @type {{ [key: string]: { [key: string]: string; }; }}
   * @memberof InlineResponse200
   */
  info?: { [key: string]: { [key: string]: string } } | null;
  /**
   *
   * @type {{ [key: string]: { [key: string]: string; }; }}
   * @memberof InlineResponse200
   */
  error?: { [key: string]: { [key: string]: string } } | null;
  /**
   *
   * @type {{ [key: string]: { [key: string]: string; }; }}
   * @memberof InlineResponse200
   */
  details?: { [key: string]: { [key: string]: string } };
}
/**
 *
 * @export
 * @interface InlineResponse503
 */
export interface InlineResponse503 {
  /**
   *
   * @type {string}
   * @memberof InlineResponse503
   */
  status?: string;
  /**
   *
   * @type {{ [key: string]: { [key: string]: string; }; }}
   * @memberof InlineResponse503
   */
  info?: { [key: string]: { [key: string]: string } } | null;
  /**
   *
   * @type {{ [key: string]: { [key: string]: string; }; }}
   * @memberof InlineResponse503
   */
  error?: { [key: string]: { [key: string]: string } } | null;
  /**
   *
   * @type {{ [key: string]: { [key: string]: string; }; }}
   * @memberof InlineResponse503
   */
  details?: { [key: string]: { [key: string]: string } };
}
/**
 *
 * @export
 * @interface JsonbDto
 */
export interface JsonbDto {
  /**
   *
   * @type {string}
   * @memberof JsonbDto
   */
  en: string;
  /**
   *
   * @type {string}
   * @memberof JsonbDto
   */
  fr: string;
}
/**
 *
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
  /**
   *
   * @type {Customer}
   * @memberof PaymentMethod
   */
  customer?: Customer;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  customerId: string;
  /**
   *
   * @type {Array<WalletRequest>}
   * @memberof PaymentMethod
   */
  walletRequests?: Array<WalletRequest>;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  kind: PaymentMethodKindEnum;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  stripeId?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  brand?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  country?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentMethod
   */
  expMonth?: number;
  /**
   *
   * @type {number}
   * @memberof PaymentMethod
   */
  expYear?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  last4?: string;
  /**
   *
   * @type {boolean}
   * @memberof PaymentMethod
   */
  isDefault?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PaymentMethod
   */
  isDeleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  iban?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethod
   */
  bic?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum PaymentMethodKindEnum {
  CreditCard = 'creditCard',
  Bank = 'bank',
}

/**
 *
 * @export
 * @interface PaymentMethodCreateBankDto
 */
export interface PaymentMethodCreateBankDto {
  /**
   *
   * @type {string}
   * @memberof PaymentMethodCreateBankDto
   */
  iban: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodCreateBankDto
   */
  bic: string;
}
/**
 *
 * @export
 * @interface PaymentMethodDto
 */
export interface PaymentMethodDto {
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  kind: PaymentMethodDtoKindEnum;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  stripeId?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  brand?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  country?: string;
  /**
   *
   * @type {number}
   * @memberof PaymentMethodDto
   */
  expMonth?: number;
  /**
   *
   * @type {number}
   * @memberof PaymentMethodDto
   */
  expYear?: number;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  last4?: string;
  /**
   *
   * @type {boolean}
   * @memberof PaymentMethodDto
   */
  isDefault?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PaymentMethodDto
   */
  isDeleted?: boolean;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  iban?: string;
  /**
   *
   * @type {string}
   * @memberof PaymentMethodDto
   */
  bic?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum PaymentMethodDtoKindEnum {
  CreditCard = 'creditCard',
  Bank = 'bank',
}

/**
 *
 * @export
 * @interface Property
 */
export interface Property {
  /**
   *
   * @type {Array<BricksTransaction>}
   * @memberof Property
   */
  bricksTransactions?: Array<BricksTransaction>;
  /**
   *
   * @type {Array<PropertyMonthlyUpdate>}
   * @memberof Property
   */
  propertyMonthlyUpdates?: Array<PropertyMonthlyUpdate>;
  /**
   *
   * @type {Array<BrickPrice>}
   * @memberof Property
   */
  brickPrices?: Array<BrickPrice>;
  /**
   *
   * @type {Array<PropertyDividends>}
   * @memberof Property
   */
  propertyDividends?: Array<PropertyDividends>;
  /**
   *
   * @type {Array<PropertyAdvantages>}
   * @memberof Property
   */
  propertyAdvantages?: Array<PropertyAdvantages>;
  /**
   *
   * @type {Array<WalletTransaction>}
   * @memberof Property
   */
  walletTransactions?: Array<WalletTransaction>;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  updatedAt: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  name: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  description: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  investmentCase: JsonbDto;
  /**
   *
   * @type {Array<string>}
   * @memberof Property
   */
  imageGallery: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Property
   */
  videoGallery: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Property
   */
  documents: Array<string>;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  address: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  localisationDescription: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  floor: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  surface: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  bedrooms: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  bathrooms: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  kitchen?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  gym?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  patio?: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  pool: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  hotTub?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  parking?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  propertyCondition: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  neighborhood: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  schools: number;
  /**
   *
   * @type {object}
   * @memberof Property
   */
  transport: object;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  offeringName?: JsonbDto;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  offerDateStart: string;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  offerDateEnd: string;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  numberOfBricks: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  minCommitmentBricks?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  maxCommitmentBricks?: number;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  type: PropertyTypeEnum;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  status: PropertyStatusEnum;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  propertyValuation: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  capitalGrowth: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  foundingTarget: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  rentalDividends: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  dividendsYield: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  returnOnInvestment: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  propertyPurchaseCost: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  otherPropertyPurchaseCost: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  transactionCost: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  cashReserve: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  totalAcquisitionCost: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  debtRemaining: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  taxesOnResale: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  grossRentPerYear: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  propertyExpenses: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  debtReimbursement: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  netRentalBeforeTaxes: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  taxesPayments: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  netRentalPerYear: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  initialDebt: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  loanTerms: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof Property
   */
  loanType: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  interestRate: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  brickPrice: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  currentValuePercent?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  totalDividendsReceivedPercent?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  totalPercent?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  totalValue?: number;
  /**
   *
   * @type {string}
   * @memberof Property
   */
  lastDividendsPaidDate?: string;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  lastDividendsPerBrick?: number;
  /**
   *
   * @type {number}
   * @memberof Property
   */
  bricksFunded?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum PropertyTypeEnum {
  House = 'house',
  Villa = 'villa',
  Unit = 'unit',
  BlockOfUnits = 'blockOfUnits',
  Premise = 'premise',
  Commercial = 'commercial',
  Land = 'land',
}
/**
 * @export
 * @enum {string}
 */
export enum PropertyStatusEnum {
  New = 'new',
  Secondary = 'secondary',
}

/**
 *
 * @export
 * @interface PropertyAdvantages
 */
export interface PropertyAdvantages {
  /**
   *
   * @type {Property}
   * @memberof PropertyAdvantages
   */
  property?: Property;
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantages
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantages
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantages
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantages
   */
  updatedAt: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantages
   */
  title: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantages
   */
  description: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyAdvantagesCreateDto
 */
export interface PropertyAdvantagesCreateDto {
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantagesCreateDto
   */
  propertyId: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantagesCreateDto
   */
  title?: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantagesCreateDto
   */
  description?: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyAdvantagesDto
 */
export interface PropertyAdvantagesDto {
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantagesDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantagesDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantagesDto
   */
  updatedAt: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantagesDto
   */
  title: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantagesDto
   */
  description: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyAdvantagesUpdateDto
 */
export interface PropertyAdvantagesUpdateDto {
  /**
   *
   * @type {string}
   * @memberof PropertyAdvantagesUpdateDto
   */
  propertyId: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantagesUpdateDto
   */
  title: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyAdvantagesUpdateDto
   */
  description: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyChartDto
 */
export interface PropertyChartDto {
  /**
   *
   * @type {string}
   * @memberof PropertyChartDto
   */
  month: string;
  /**
   *
   * @type {number}
   * @memberof PropertyChartDto
   */
  value: number;
}
/**
 *
 * @export
 * @interface PropertyCreateDto
 */
export interface PropertyCreateDto {
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  name: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  description: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  investmentCase: JsonbDto;
  /**
   *
   * @type {Array<string>}
   * @memberof PropertyCreateDto
   */
  imageGallery: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PropertyCreateDto
   */
  videoGallery: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PropertyCreateDto
   */
  documents?: Array<string>;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  address: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  localisationDescription: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  floor?: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  surface: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  bedrooms: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  bathrooms: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  kitchen?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  gym?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  patio?: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  pool: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  hotTub?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  parking?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  propertyCondition: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  neighborhood: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  schools: number;
  /**
   *
   * @type {object}
   * @memberof PropertyCreateDto
   */
  transport: object;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  offeringName?: JsonbDto;
  /**
   *
   * @type {string}
   * @memberof PropertyCreateDto
   */
  offerDateStart: string;
  /**
   *
   * @type {string}
   * @memberof PropertyCreateDto
   */
  offerDateEnd: string;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  numberOfBricks?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  minCommitmentBricks?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  maxCommitmentBricks?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyCreateDto
   */
  type: PropertyCreateDtoTypeEnum;
  /**
   *
   * @type {string}
   * @memberof PropertyCreateDto
   */
  status: PropertyCreateDtoStatusEnum;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  propertyValuation: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  capitalGrowth?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  dividendsYield: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  foundingTarget: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  rentalDividends: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  returnOnInvestment: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  propertyPurchaseCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  otherPropertyPurchaseCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  transactionCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  cashReserve: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  totalAcquisitionCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  debtRemaining: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  taxesOnResale: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  grossRentPerYear: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  propertyExpenses: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  debtReimbursement: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  netRentalBeforeTaxes: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  taxesPayments: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  netRentalPerYear: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  initialDebt: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  loanTerms: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyCreateDto
   */
  loanType: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  interestRate: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  brickPrice: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  totalDividendsReceivedPercent?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  totalPercent?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyCreateDto
   */
  currentValuePercent?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum PropertyCreateDtoTypeEnum {
  House = 'house',
  Villa = 'villa',
  Unit = 'unit',
  BlockOfUnits = 'blockOfUnits',
  Premise = 'premise',
  Commercial = 'commercial',
  Land = 'land',
}
/**
 * @export
 * @enum {string}
 */
export enum PropertyCreateDtoStatusEnum {
  New = 'new',
  Secondary = 'secondary',
}

/**
 *
 * @export
 * @interface PropertyDividends
 */
export interface PropertyDividends {
  /**
   *
   * @type {Property}
   * @memberof PropertyDividends
   */
  property?: Property;
  /**
   *
   * @type {string}
   * @memberof PropertyDividends
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDividends
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDividends
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDividends
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof PropertyDividends
   */
  value: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDividends
   */
  perBrick: number;
}
/**
 *
 * @export
 * @interface PropertyDividendsDto
 */
export interface PropertyDividendsDto {
  /**
   *
   * @type {string}
   * @memberof PropertyDividendsDto
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDividendsDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDividendsDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDividendsDto
   */
  updatedAt: string;
  /**
   *
   * @type {number}
   * @memberof PropertyDividendsDto
   */
  value: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDividendsDto
   */
  perBrick: number;
}
/**
 *
 * @export
 * @interface PropertyDto
 */
export interface PropertyDto {
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  updatedAt: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  name: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  description: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  investmentCase: JsonbDto;
  /**
   *
   * @type {Array<string>}
   * @memberof PropertyDto
   */
  imageGallery: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PropertyDto
   */
  videoGallery: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof PropertyDto
   */
  documents: Array<string>;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  address: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  localisationDescription: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  floor: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  surface: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  bedrooms: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  bathrooms: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  kitchen?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  gym?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  patio?: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  pool: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  hotTub?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  parking?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  propertyCondition: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  neighborhood: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  schools: number;
  /**
   *
   * @type {object}
   * @memberof PropertyDto
   */
  transport: object;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  offeringName?: JsonbDto;
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  offerDateStart: string;
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  offerDateEnd: string;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  numberOfBricks: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  minCommitmentBricks?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  maxCommitmentBricks?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  type: PropertyDtoTypeEnum;
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  status: PropertyDtoStatusEnum;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  propertyValuation: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  capitalGrowth: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  foundingTarget: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  rentalDividends: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  dividendsYield: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  returnOnInvestment: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  propertyPurchaseCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  otherPropertyPurchaseCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  transactionCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  cashReserve: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  totalAcquisitionCost: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  debtRemaining: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  taxesOnResale: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  grossRentPerYear: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  propertyExpenses: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  debtReimbursement: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  netRentalBeforeTaxes: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  taxesPayments: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  netRentalPerYear: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  initialDebt: number;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  loanTerms: JsonbDto;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyDto
   */
  loanType: JsonbDto;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  interestRate: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  brickPrice: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  currentValuePercent?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  totalDividendsReceivedPercent?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  totalPercent?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  totalValue?: number;
  /**
   *
   * @type {string}
   * @memberof PropertyDto
   */
  lastDividendsPaidDate?: string;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  lastDividendsPerBrick?: number;
  /**
   *
   * @type {number}
   * @memberof PropertyDto
   */
  bricksFunded?: number;
}

/**
 * @export
 * @enum {string}
 */
export enum PropertyDtoTypeEnum {
  House = 'house',
  Villa = 'villa',
  Unit = 'unit',
  BlockOfUnits = 'blockOfUnits',
  Premise = 'premise',
  Commercial = 'commercial',
  Land = 'land',
}
/**
 * @export
 * @enum {string}
 */
export enum PropertyDtoStatusEnum {
  New = 'new',
  Secondary = 'secondary',
}

/**
 *
 * @export
 * @interface PropertyMonthlyUpdate
 */
export interface PropertyMonthlyUpdate {
  /**
   *
   * @type {Property}
   * @memberof PropertyMonthlyUpdate
   */
  property?: Property;
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdate
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdate
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdate
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdate
   */
  updatedAt: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyMonthlyUpdate
   */
  description: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyMonthlyUpdateCreateDto
 */
export interface PropertyMonthlyUpdateCreateDto {
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdateCreateDto
   */
  propertyId: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyMonthlyUpdateCreateDto
   */
  description: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyMonthlyUpdateDto
 */
export interface PropertyMonthlyUpdateDto {
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdateDto
   */
  propertyId: string;
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdateDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdateDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdateDto
   */
  updatedAt: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyMonthlyUpdateDto
   */
  description: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyMonthlyUpdateUpdateDto
 */
export interface PropertyMonthlyUpdateUpdateDto {
  /**
   *
   * @type {string}
   * @memberof PropertyMonthlyUpdateUpdateDto
   */
  propertyId: string;
  /**
   *
   * @type {JsonbDto}
   * @memberof PropertyMonthlyUpdateUpdateDto
   */
  description?: JsonbDto;
}
/**
 *
 * @export
 * @interface PropertyUpdateDto
 */
export interface PropertyUpdateDto {
  /**
   *
   * @type {number}
   * @memberof PropertyUpdateDto
   */
  bricksFunded?: number;
}
/**
 *
 * @export
 * @interface SecretKeyResponseDto
 */
export interface SecretKeyResponseDto {
  /**
   *
   * @type {string}
   * @memberof SecretKeyResponseDto
   */
  secretKey: string;
}
/**
 *
 * @export
 * @interface SignedUrlDocumentBodyDto
 */
export interface SignedUrlDocumentBodyDto {
  /**
   *
   * @type {string}
   * @memberof SignedUrlDocumentBodyDto
   */
  filename: string;
}
/**
 *
 * @export
 * @interface SignedUrlPhotoBodyDto
 */
export interface SignedUrlPhotoBodyDto {
  /**
   *
   * @type {string}
   * @memberof SignedUrlPhotoBodyDto
   */
  filename: string;
}
/**
 *
 * @export
 * @interface SignedUrlResDto
 */
export interface SignedUrlResDto {
  /**
   *
   * @type {string}
   * @memberof SignedUrlResDto
   */
  signedUrl: string;
  /**
   *
   * @type {string}
   * @memberof SignedUrlResDto
   */
  fileKey: string;
}
/**
 *
 * @export
 * @interface SignedUrlVideoBodyDto
 */
export interface SignedUrlVideoBodyDto {
  /**
   *
   * @type {string}
   * @memberof SignedUrlVideoBodyDto
   */
  filename: string;
}
/**
 *
 * @export
 * @interface WalletRequest
 */
export interface WalletRequest {
  /**
   *
   * @type {Array<PaymentMethod>}
   * @memberof WalletRequest
   */
  paymentMethods: Array<PaymentMethod>;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  paymentMethodId: string;
  /**
   *
   * @type {WalletTransaction}
   * @memberof WalletRequest
   */
  walletTransaction: WalletTransaction;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  walletTransactionId: string;
  /**
   *
   * @type {Customer}
   * @memberof WalletRequest
   */
  customer?: Customer;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  customerId: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  bankStatus: WalletRequestBankStatusEnum;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  cardStatus: WalletRequestCardStatusEnum;
  /**
   *
   * @type {string}
   * @memberof WalletRequest
   */
  kind: WalletRequestKindEnum;
  /**
   *
   * @type {number}
   * @memberof WalletRequest
   */
  value: number;
}

/**
 * @export
 * @enum {string}
 */
export enum WalletRequestBankStatusEnum {
  Waiting = 'waiting',
  Declined = 'declined',
  Confirmed = 'confirmed',
}
/**
 * @export
 * @enum {string}
 */
export enum WalletRequestCardStatusEnum {
  Processing = 'processing',
  Declined = 'declined',
  Confirmed = 'confirmed',
}
/**
 * @export
 * @enum {string}
 */
export enum WalletRequestKindEnum {
  Topup = 'topup',
  Withdrawal = 'withdrawal',
  Refund = 'refund',
}

/**
 *
 * @export
 * @interface WalletRequestBankDto
 */
export interface WalletRequestBankDto {
  /**
   *
   * @type {number}
   * @memberof WalletRequestBankDto
   */
  value: number;
}
/**
 *
 * @export
 * @interface WalletRequestDto
 */
export interface WalletRequestDto {
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  paymentMethodId: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  walletTransactionId: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  customerId: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  bankStatus: WalletRequestDtoBankStatusEnum;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  cardStatus: WalletRequestDtoCardStatusEnum;
  /**
   *
   * @type {string}
   * @memberof WalletRequestDto
   */
  kind: WalletRequestDtoKindEnum;
  /**
   *
   * @type {number}
   * @memberof WalletRequestDto
   */
  value: number;
}

/**
 * @export
 * @enum {string}
 */
export enum WalletRequestDtoBankStatusEnum {
  Waiting = 'waiting',
  Declined = 'declined',
  Confirmed = 'confirmed',
}
/**
 * @export
 * @enum {string}
 */
export enum WalletRequestDtoCardStatusEnum {
  Processing = 'processing',
  Declined = 'declined',
  Confirmed = 'confirmed',
}
/**
 * @export
 * @enum {string}
 */
export enum WalletRequestDtoKindEnum {
  Topup = 'topup',
  Withdrawal = 'withdrawal',
  Refund = 'refund',
}

/**
 *
 * @export
 * @interface WalletRequestResDto
 */
export interface WalletRequestResDto {
  /**
   *
   * @type {string}
   * @memberof WalletRequestResDto
   */
  cursor: string | null;
  /**
   *
   * @type {Array<WalletRequestDto>}
   * @memberof WalletRequestResDto
   */
  data: Array<WalletRequestDto>;
}
/**
 *
 * @export
 * @interface WalletRequestUpdateDto
 */
export interface WalletRequestUpdateDto {
  /**
   *
   * @type {string}
   * @memberof WalletRequestUpdateDto
   */
  bankStatus: WalletRequestUpdateDtoBankStatusEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum WalletRequestUpdateDtoBankStatusEnum {
  Waiting = 'waiting',
  Declined = 'declined',
  Confirmed = 'confirmed',
}

/**
 *
 * @export
 * @interface WalletRequestWithdrawalDto
 */
export interface WalletRequestWithdrawalDto {
  /**
   *
   * @type {string}
   * @memberof WalletRequestWithdrawalDto
   */
  paymentMethodId: string;
  /**
   *
   * @type {number}
   * @memberof WalletRequestWithdrawalDto
   */
  value: number;
}
/**
 *
 * @export
 * @interface WalletTransaction
 */
export interface WalletTransaction {
  /**
   *
   * @type {Customer}
   * @memberof WalletTransaction
   */
  customer?: Customer;
  /**
   *
   * @type {string}
   * @memberof WalletTransaction
   */
  customerId: string;
  /**
   *
   * @type {Property}
   * @memberof WalletTransaction
   */
  property?: Property;
  /**
   *
   * @type {string}
   * @memberof WalletTransaction
   */
  propertyId?: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransaction
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransaction
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransaction
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransaction
   */
  kind: WalletTransactionKindEnum;
  /**
   *
   * @type {number}
   * @memberof WalletTransaction
   */
  value: number;
  /**
   *
   * @type {number}
   * @memberof WalletTransaction
   */
  balance: number;
  /**
   *
   * @type {string}
   * @memberof WalletTransaction
   */
  requisites: string;
}

/**
 * @export
 * @enum {string}
 */
export enum WalletTransactionKindEnum {
  Topup = 'topup',
  Withdrawal = 'withdrawal',
  Dividends = 'dividends',
  BuyingBricks = 'buying_bricks',
  SellingBricks = 'selling_bricks',
}

/**
 *
 * @export
 * @interface WalletTransactionCreateDividendsDto
 */
export interface WalletTransactionCreateDividendsDto {
  /**
   *
   * @type {string}
   * @memberof WalletTransactionCreateDividendsDto
   */
  propertyId: string;
  /**
   *
   * @type {number}
   * @memberof WalletTransactionCreateDividendsDto
   */
  value: number;
}
/**
 *
 * @export
 * @interface WalletTransactionDividendsRes
 */
export interface WalletTransactionDividendsRes {
  /**
   *
   * @type {number}
   * @memberof WalletTransactionDividendsRes
   */
  data: number;
  /**
   *
   * @type {number}
   * @memberof WalletTransactionDividendsRes
   */
  status: number;
}
/**
 *
 * @export
 * @interface WalletTransactionDto
 */
export interface WalletTransactionDto {
  /**
   *
   * @type {string}
   * @memberof WalletTransactionDto
   */
  customerId: string;
  /**
   *
   * @type {Property}
   * @memberof WalletTransactionDto
   */
  property?: Property;
  /**
   *
   * @type {string}
   * @memberof WalletTransactionDto
   */
  propertyId?: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransactionDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransactionDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransactionDto
   */
  updatedAt: string;
  /**
   *
   * @type {string}
   * @memberof WalletTransactionDto
   */
  kind: WalletTransactionDtoKindEnum;
  /**
   *
   * @type {number}
   * @memberof WalletTransactionDto
   */
  value: number;
  /**
   *
   * @type {number}
   * @memberof WalletTransactionDto
   */
  balance: number;
  /**
   *
   * @type {string}
   * @memberof WalletTransactionDto
   */
  requisites: string;
}

/**
 * @export
 * @enum {string}
 */
export enum WalletTransactionDtoKindEnum {
  Topup = 'topup',
  Withdrawal = 'withdrawal',
  Dividends = 'dividends',
  BuyingBricks = 'buying_bricks',
  SellingBricks = 'selling_bricks',
}

/**
 *
 * @export
 * @interface WalletTransactionResDto
 */
export interface WalletTransactionResDto {
  /**
   *
   * @type {string}
   * @memberof WalletTransactionResDto
   */
  cursor: string | null;
  /**
   *
   * @type {Array<WalletTransactionDto>}
   * @memberof WalletTransactionResDto
   */
  data: Array<WalletTransactionDto>;
}

/**
 * AdminPanelAdminsApi - axios parameter creator
 * @export
 */
export const AdminPanelAdminsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create one AdminDto
     * @param {AdminCreateCrudDto} adminCreateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseAdminsCrudControllerAdminDto: async (
      adminCreateCrudDto: AdminCreateCrudDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminCreateCrudDto' is not null or undefined
      assertParamExists('createOneBaseAdminsCrudControllerAdminDto', 'adminCreateCrudDto', adminCreateCrudDto);
      const localVarPath = `/admin-panel/admins`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(adminCreateCrudDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one AdminDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBaseAdminsCrudControllerAdminDto: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteOneBaseAdminsCrudControllerAdminDto', 'id', id);
      const localVarPath = `/admin-panel/admins/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many AdminDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseAdminsCrudControllerAdminDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/admins`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one AdminDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseAdminsCrudControllerAdminDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBaseAdminsCrudControllerAdminDto', 'id', id);
      const localVarPath = `/admin-panel/admins/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one AdminDto
     * @param {string} id
     * @param {AdminUpdateCrudDto} adminUpdateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseAdminsCrudControllerAdminDto: async (
      id: string,
      adminUpdateCrudDto: AdminUpdateCrudDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateOneBaseAdminsCrudControllerAdminDto', 'id', id);
      // verify required parameter 'adminUpdateCrudDto' is not null or undefined
      assertParamExists('updateOneBaseAdminsCrudControllerAdminDto', 'adminUpdateCrudDto', adminUpdateCrudDto);
      const localVarPath = `/admin-panel/admins/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(adminUpdateCrudDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelAdminsApi - functional programming interface
 * @export
 */
export const AdminPanelAdminsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelAdminsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create one AdminDto
     * @param {AdminCreateCrudDto} adminCreateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBaseAdminsCrudControllerAdminDto(
      adminCreateCrudDto: AdminCreateCrudDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBaseAdminsCrudControllerAdminDto(
        adminCreateCrudDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete one AdminDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOneBaseAdminsCrudControllerAdminDto(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBaseAdminsCrudControllerAdminDto(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many AdminDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseAdminsCrudControllerAdminDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyAdminDtoResponseDto | Array<AdminDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseAdminsCrudControllerAdminDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one AdminDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBaseAdminsCrudControllerAdminDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseAdminsCrudControllerAdminDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update one AdminDto
     * @param {string} id
     * @param {AdminUpdateCrudDto} adminUpdateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBaseAdminsCrudControllerAdminDto(
      id: string,
      adminUpdateCrudDto: AdminUpdateCrudDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseAdminsCrudControllerAdminDto(
        id,
        adminUpdateCrudDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelAdminsApi - factory interface
 * @export
 */
export const AdminPanelAdminsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelAdminsApiFp(configuration);
  return {
    /**
     *
     * @summary Create one AdminDto
     * @param {AdminCreateCrudDto} adminCreateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseAdminsCrudControllerAdminDto(
      adminCreateCrudDto: AdminCreateCrudDto,
      options?: any,
    ): AxiosPromise<AdminDto> {
      return localVarFp
        .createOneBaseAdminsCrudControllerAdminDto(adminCreateCrudDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one AdminDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBaseAdminsCrudControllerAdminDto(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteOneBaseAdminsCrudControllerAdminDto(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many AdminDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseAdminsCrudControllerAdminDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyAdminDtoResponseDto | Array<AdminDto>> {
      return localVarFp
        .getManyBaseAdminsCrudControllerAdminDto(fields, s, filter, or, sort, join, limit, offset, page, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one AdminDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseAdminsCrudControllerAdminDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<AdminDto> {
      return localVarFp
        .getOneBaseAdminsCrudControllerAdminDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one AdminDto
     * @param {string} id
     * @param {AdminUpdateCrudDto} adminUpdateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseAdminsCrudControllerAdminDto(
      id: string,
      adminUpdateCrudDto: AdminUpdateCrudDto,
      options?: any,
    ): AxiosPromise<AdminDto> {
      return localVarFp
        .updateOneBaseAdminsCrudControllerAdminDto(id, adminUpdateCrudDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelAdminsApi - object-oriented interface
 * @export
 * @class AdminPanelAdminsApi
 * @extends {BaseAPI}
 */
export class AdminPanelAdminsApi extends BaseAPI {
  /**
   *
   * @summary Create one AdminDto
   * @param {AdminCreateCrudDto} adminCreateCrudDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelAdminsApi
   */
  public createOneBaseAdminsCrudControllerAdminDto(adminCreateCrudDto: AdminCreateCrudDto, options?: any) {
    return AdminPanelAdminsApiFp(this.configuration)
      .createOneBaseAdminsCrudControllerAdminDto(adminCreateCrudDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one AdminDto
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelAdminsApi
   */
  public deleteOneBaseAdminsCrudControllerAdminDto(id: string, options?: any) {
    return AdminPanelAdminsApiFp(this.configuration)
      .deleteOneBaseAdminsCrudControllerAdminDto(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many AdminDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelAdminsApi
   */
  public getManyBaseAdminsCrudControllerAdminDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelAdminsApiFp(this.configuration)
      .getManyBaseAdminsCrudControllerAdminDto(fields, s, filter, or, sort, join, limit, offset, page, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one AdminDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelAdminsApi
   */
  public getOneBaseAdminsCrudControllerAdminDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelAdminsApiFp(this.configuration)
      .getOneBaseAdminsCrudControllerAdminDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one AdminDto
   * @param {string} id
   * @param {AdminUpdateCrudDto} adminUpdateCrudDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelAdminsApi
   */
  public updateOneBaseAdminsCrudControllerAdminDto(id: string, adminUpdateCrudDto: AdminUpdateCrudDto, options?: any) {
    return AdminPanelAdminsApiFp(this.configuration)
      .updateOneBaseAdminsCrudControllerAdminDto(id, adminUpdateCrudDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelBrickPricesApi - axios parameter creator
 * @export
 */
export const AdminPanelBrickPricesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create one BrickPriceDto
     * @param {BrickPriceCreateCrudDto} brickPriceCreateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseBrickPricesCrudControllerBrickPriceDto: async (
      brickPriceCreateCrudDto: BrickPriceCreateCrudDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'brickPriceCreateCrudDto' is not null or undefined
      assertParamExists(
        'createOneBaseBrickPricesCrudControllerBrickPriceDto',
        'brickPriceCreateCrudDto',
        brickPriceCreateCrudDto,
      );
      const localVarPath = `/admin-panel/brick-prices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        brickPriceCreateCrudDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many BrickPriceDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseBrickPricesCrudControllerBrickPriceDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/brick-prices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelBrickPricesApi - functional programming interface
 * @export
 */
export const AdminPanelBrickPricesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelBrickPricesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create one BrickPriceDto
     * @param {BrickPriceCreateCrudDto} brickPriceCreateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBaseBrickPricesCrudControllerBrickPriceDto(
      brickPriceCreateCrudDto: BrickPriceCreateCrudDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrickPrice>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBaseBrickPricesCrudControllerBrickPriceDto(
        brickPriceCreateCrudDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many BrickPriceDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseBrickPricesCrudControllerBrickPriceDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyBrickPriceDtoResponseDto | Array<BrickPriceDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseBrickPricesCrudControllerBrickPriceDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelBrickPricesApi - factory interface
 * @export
 */
export const AdminPanelBrickPricesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelBrickPricesApiFp(configuration);
  return {
    /**
     *
     * @summary Create one BrickPriceDto
     * @param {BrickPriceCreateCrudDto} brickPriceCreateCrudDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBaseBrickPricesCrudControllerBrickPriceDto(
      brickPriceCreateCrudDto: BrickPriceCreateCrudDto,
      options?: any,
    ): AxiosPromise<BrickPrice> {
      return localVarFp
        .createOneBaseBrickPricesCrudControllerBrickPriceDto(brickPriceCreateCrudDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many BrickPriceDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseBrickPricesCrudControllerBrickPriceDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyBrickPriceDtoResponseDto | Array<BrickPriceDto>> {
      return localVarFp
        .getManyBaseBrickPricesCrudControllerBrickPriceDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelBrickPricesApi - object-oriented interface
 * @export
 * @class AdminPanelBrickPricesApi
 * @extends {BaseAPI}
 */
export class AdminPanelBrickPricesApi extends BaseAPI {
  /**
   *
   * @summary Create one BrickPriceDto
   * @param {BrickPriceCreateCrudDto} brickPriceCreateCrudDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelBrickPricesApi
   */
  public createOneBaseBrickPricesCrudControllerBrickPriceDto(
    brickPriceCreateCrudDto: BrickPriceCreateCrudDto,
    options?: any,
  ) {
    return AdminPanelBrickPricesApiFp(this.configuration)
      .createOneBaseBrickPricesCrudControllerBrickPriceDto(brickPriceCreateCrudDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many BrickPriceDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelBrickPricesApi
   */
  public getManyBaseBrickPricesCrudControllerBrickPriceDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelBrickPricesApiFp(this.configuration)
      .getManyBaseBrickPricesCrudControllerBrickPriceDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelCustomersApi - axios parameter creator
 * @export
 */
export const AdminPanelCustomersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve many CustomerDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseCustomersCrudControllerCustomerDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/customers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one CustomerDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseCustomersCrudControllerCustomerDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBaseCustomersCrudControllerCustomerDto', 'id', id);
      const localVarPath = `/admin-panel/customers/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelCustomersApi - functional programming interface
 * @export
 */
export const AdminPanelCustomersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelCustomersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve many CustomerDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseCustomersCrudControllerCustomerDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyCustomerDtoResponseDto | Array<CustomerDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseCustomersCrudControllerCustomerDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one CustomerDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBaseCustomersCrudControllerCustomerDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseCustomersCrudControllerCustomerDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelCustomersApi - factory interface
 * @export
 */
export const AdminPanelCustomersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelCustomersApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve many CustomerDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseCustomersCrudControllerCustomerDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyCustomerDtoResponseDto | Array<CustomerDto>> {
      return localVarFp
        .getManyBaseCustomersCrudControllerCustomerDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one CustomerDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseCustomersCrudControllerCustomerDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<CustomerDto> {
      return localVarFp
        .getOneBaseCustomersCrudControllerCustomerDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelCustomersApi - object-oriented interface
 * @export
 * @class AdminPanelCustomersApi
 * @extends {BaseAPI}
 */
export class AdminPanelCustomersApi extends BaseAPI {
  /**
   *
   * @summary Retrieve many CustomerDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelCustomersApi
   */
  public getManyBaseCustomersCrudControllerCustomerDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelCustomersApiFp(this.configuration)
      .getManyBaseCustomersCrudControllerCustomerDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one CustomerDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelCustomersApi
   */
  public getOneBaseCustomersCrudControllerCustomerDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelCustomersApiFp(this.configuration)
      .getOneBaseCustomersCrudControllerCustomerDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelCustomersProfilesApi - axios parameter creator
 * @export
 */
export const AdminPanelCustomersProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve many CustomerProfileDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseCustomerProfileCrudControllerCustomerProfileDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/customers-profiles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one CustomerProfileDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseCustomerProfileCrudControllerCustomerProfileDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBaseCustomerProfileCrudControllerCustomerProfileDto', 'id', id);
      const localVarPath = `/admin-panel/customers-profiles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one CustomerProfileDto
     * @param {string} id
     * @param {CustomerProfileDto} customerProfileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseCustomerProfileCrudControllerCustomerProfileDto: async (
      id: string,
      customerProfileDto: CustomerProfileDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateOneBaseCustomerProfileCrudControllerCustomerProfileDto', 'id', id);
      // verify required parameter 'customerProfileDto' is not null or undefined
      assertParamExists(
        'updateOneBaseCustomerProfileCrudControllerCustomerProfileDto',
        'customerProfileDto',
        customerProfileDto,
      );
      const localVarPath = `/admin-panel/customers-profiles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(customerProfileDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelCustomersProfilesApi - functional programming interface
 * @export
 */
export const AdminPanelCustomersProfilesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelCustomersProfilesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve many CustomerProfileDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseCustomerProfileCrudControllerCustomerProfileDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetManyCustomerProfileDtoResponseDto | Array<CustomerProfileDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseCustomerProfileCrudControllerCustomerProfileDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one CustomerProfileDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBaseCustomerProfileCrudControllerCustomerProfileDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseCustomerProfileCrudControllerCustomerProfileDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update one CustomerProfileDto
     * @param {string} id
     * @param {CustomerProfileDto} customerProfileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBaseCustomerProfileCrudControllerCustomerProfileDto(
      id: string,
      customerProfileDto: CustomerProfileDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseCustomerProfileCrudControllerCustomerProfileDto(
        id,
        customerProfileDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelCustomersProfilesApi - factory interface
 * @export
 */
export const AdminPanelCustomersProfilesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelCustomersProfilesApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve many CustomerProfileDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseCustomerProfileCrudControllerCustomerProfileDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyCustomerProfileDtoResponseDto | Array<CustomerProfileDto>> {
      return localVarFp
        .getManyBaseCustomerProfileCrudControllerCustomerProfileDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one CustomerProfileDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseCustomerProfileCrudControllerCustomerProfileDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<CustomerProfileDto> {
      return localVarFp
        .getOneBaseCustomerProfileCrudControllerCustomerProfileDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one CustomerProfileDto
     * @param {string} id
     * @param {CustomerProfileDto} customerProfileDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseCustomerProfileCrudControllerCustomerProfileDto(
      id: string,
      customerProfileDto: CustomerProfileDto,
      options?: any,
    ): AxiosPromise<CustomerProfileDto> {
      return localVarFp
        .updateOneBaseCustomerProfileCrudControllerCustomerProfileDto(id, customerProfileDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelCustomersProfilesApi - object-oriented interface
 * @export
 * @class AdminPanelCustomersProfilesApi
 * @extends {BaseAPI}
 */
export class AdminPanelCustomersProfilesApi extends BaseAPI {
  /**
   *
   * @summary Retrieve many CustomerProfileDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelCustomersProfilesApi
   */
  public getManyBaseCustomerProfileCrudControllerCustomerProfileDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelCustomersProfilesApiFp(this.configuration)
      .getManyBaseCustomerProfileCrudControllerCustomerProfileDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one CustomerProfileDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelCustomersProfilesApi
   */
  public getOneBaseCustomerProfileCrudControllerCustomerProfileDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelCustomersProfilesApiFp(this.configuration)
      .getOneBaseCustomerProfileCrudControllerCustomerProfileDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one CustomerProfileDto
   * @param {string} id
   * @param {CustomerProfileDto} customerProfileDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelCustomersProfilesApi
   */
  public updateOneBaseCustomerProfileCrudControllerCustomerProfileDto(
    id: string,
    customerProfileDto: CustomerProfileDto,
    options?: any,
  ) {
    return AdminPanelCustomersProfilesApiFp(this.configuration)
      .updateOneBaseCustomerProfileCrudControllerCustomerProfileDto(id, customerProfileDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelPropertiesApi - axios parameter creator
 * @export
 */
export const AdminPanelPropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create one PropertyDto
     * @param {PropertyCreateDto} propertyCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBasePropertiesCrudControllerPropertyDto: async (
      propertyCreateDto: PropertyCreateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'propertyCreateDto' is not null or undefined
      assertParamExists('createOneBasePropertiesCrudControllerPropertyDto', 'propertyCreateDto', propertyCreateDto);
      const localVarPath = `/admin-panel/properties`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(propertyCreateDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one PropertyDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBasePropertiesCrudControllerPropertyDto: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteOneBasePropertiesCrudControllerPropertyDto', 'id', id);
      const localVarPath = `/admin-panel/properties/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many PropertyDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertiesCrudControllerPropertyDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/properties`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one PropertyDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertiesCrudControllerPropertyDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBasePropertiesCrudControllerPropertyDto', 'id', id);
      const localVarPath = `/admin-panel/properties/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create signed url to property document
     * @param {SignedUrlDocumentBodyDto} signedUrlDocumentBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerCreateSignedUrlForPropertyDocument: async (
      signedUrlDocumentBodyDto: SignedUrlDocumentBodyDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signedUrlDocumentBodyDto' is not null or undefined
      assertParamExists(
        'propertiesControllerCreateSignedUrlForPropertyDocument',
        'signedUrlDocumentBodyDto',
        signedUrlDocumentBodyDto,
      );
      const localVarPath = `/admin-panel/property-document-signed-url`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signedUrlDocumentBodyDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create signed url to property photo
     * @param {SignedUrlPhotoBodyDto} signedUrlPhotoBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerCreateSignedUrlForPropertyPhoto: async (
      signedUrlPhotoBodyDto: SignedUrlPhotoBodyDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signedUrlPhotoBodyDto' is not null or undefined
      assertParamExists(
        'propertiesControllerCreateSignedUrlForPropertyPhoto',
        'signedUrlPhotoBodyDto',
        signedUrlPhotoBodyDto,
      );
      const localVarPath = `/admin-panel/property-photo-signed-url`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(signedUrlPhotoBodyDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create signed url to property video
     * @param {SignedUrlVideoBodyDto} signedUrlVideoBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerCreateSignedUrlForPropertyVideo: async (
      signedUrlVideoBodyDto: SignedUrlVideoBodyDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signedUrlVideoBodyDto' is not null or undefined
      assertParamExists(
        'propertiesControllerCreateSignedUrlForPropertyVideo',
        'signedUrlVideoBodyDto',
        signedUrlVideoBodyDto,
      );
      const localVarPath = `/admin-panel/property-video-signed-url`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(signedUrlVideoBodyDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one PropertyDto
     * @param {string} id
     * @param {PropertyUpdateDto} propertyUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBasePropertiesCrudControllerPropertyDto: async (
      id: string,
      propertyUpdateDto: PropertyUpdateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateOneBasePropertiesCrudControllerPropertyDto', 'id', id);
      // verify required parameter 'propertyUpdateDto' is not null or undefined
      assertParamExists('updateOneBasePropertiesCrudControllerPropertyDto', 'propertyUpdateDto', propertyUpdateDto);
      const localVarPath = `/admin-panel/properties/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(propertyUpdateDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelPropertiesApi - functional programming interface
 * @export
 */
export const AdminPanelPropertiesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelPropertiesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create one PropertyDto
     * @param {PropertyCreateDto} propertyCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBasePropertiesCrudControllerPropertyDto(
      propertyCreateDto: PropertyCreateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBasePropertiesCrudControllerPropertyDto(
        propertyCreateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete one PropertyDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOneBasePropertiesCrudControllerPropertyDto(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBasePropertiesCrudControllerPropertyDto(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many PropertyDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBasePropertiesCrudControllerPropertyDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetManyPropertyDtoResponseDto | Array<PropertyDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBasePropertiesCrudControllerPropertyDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one PropertyDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBasePropertiesCrudControllerPropertyDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBasePropertiesCrudControllerPropertyDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create signed url to property document
     * @param {SignedUrlDocumentBodyDto} signedUrlDocumentBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerCreateSignedUrlForPropertyDocument(
      signedUrlDocumentBodyDto: SignedUrlDocumentBodyDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignedUrlResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerCreateSignedUrlForPropertyDocument(
        signedUrlDocumentBodyDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create signed url to property photo
     * @param {SignedUrlPhotoBodyDto} signedUrlPhotoBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerCreateSignedUrlForPropertyPhoto(
      signedUrlPhotoBodyDto: SignedUrlPhotoBodyDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignedUrlResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerCreateSignedUrlForPropertyPhoto(
        signedUrlPhotoBodyDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create signed url to property video
     * @param {SignedUrlVideoBodyDto} signedUrlVideoBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerCreateSignedUrlForPropertyVideo(
      signedUrlVideoBodyDto: SignedUrlVideoBodyDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignedUrlResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerCreateSignedUrlForPropertyVideo(
        signedUrlVideoBodyDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update one PropertyDto
     * @param {string} id
     * @param {PropertyUpdateDto} propertyUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBasePropertiesCrudControllerPropertyDto(
      id: string,
      propertyUpdateDto: PropertyUpdateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBasePropertiesCrudControllerPropertyDto(
        id,
        propertyUpdateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelPropertiesApi - factory interface
 * @export
 */
export const AdminPanelPropertiesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelPropertiesApiFp(configuration);
  return {
    /**
     *
     * @summary Create one PropertyDto
     * @param {PropertyCreateDto} propertyCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBasePropertiesCrudControllerPropertyDto(
      propertyCreateDto: PropertyCreateDto,
      options?: any,
    ): AxiosPromise<PropertyDto> {
      return localVarFp
        .createOneBasePropertiesCrudControllerPropertyDto(propertyCreateDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one PropertyDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBasePropertiesCrudControllerPropertyDto(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteOneBasePropertiesCrudControllerPropertyDto(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many PropertyDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertiesCrudControllerPropertyDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyPropertyDtoResponseDto | Array<PropertyDto>> {
      return localVarFp
        .getManyBasePropertiesCrudControllerPropertyDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one PropertyDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertiesCrudControllerPropertyDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<PropertyDto> {
      return localVarFp
        .getOneBasePropertiesCrudControllerPropertyDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create signed url to property document
     * @param {SignedUrlDocumentBodyDto} signedUrlDocumentBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerCreateSignedUrlForPropertyDocument(
      signedUrlDocumentBodyDto: SignedUrlDocumentBodyDto,
      options?: any,
    ): AxiosPromise<SignedUrlResDto> {
      return localVarFp
        .propertiesControllerCreateSignedUrlForPropertyDocument(signedUrlDocumentBodyDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create signed url to property photo
     * @param {SignedUrlPhotoBodyDto} signedUrlPhotoBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerCreateSignedUrlForPropertyPhoto(
      signedUrlPhotoBodyDto: SignedUrlPhotoBodyDto,
      options?: any,
    ): AxiosPromise<SignedUrlResDto> {
      return localVarFp
        .propertiesControllerCreateSignedUrlForPropertyPhoto(signedUrlPhotoBodyDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create signed url to property video
     * @param {SignedUrlVideoBodyDto} signedUrlVideoBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerCreateSignedUrlForPropertyVideo(
      signedUrlVideoBodyDto: SignedUrlVideoBodyDto,
      options?: any,
    ): AxiosPromise<SignedUrlResDto> {
      return localVarFp
        .propertiesControllerCreateSignedUrlForPropertyVideo(signedUrlVideoBodyDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one PropertyDto
     * @param {string} id
     * @param {PropertyUpdateDto} propertyUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBasePropertiesCrudControllerPropertyDto(
      id: string,
      propertyUpdateDto: PropertyUpdateDto,
      options?: any,
    ): AxiosPromise<PropertyDto> {
      return localVarFp
        .updateOneBasePropertiesCrudControllerPropertyDto(id, propertyUpdateDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelPropertiesApi - object-oriented interface
 * @export
 * @class AdminPanelPropertiesApi
 * @extends {BaseAPI}
 */
export class AdminPanelPropertiesApi extends BaseAPI {
  /**
   *
   * @summary Create one PropertyDto
   * @param {PropertyCreateDto} propertyCreateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public createOneBasePropertiesCrudControllerPropertyDto(propertyCreateDto: PropertyCreateDto, options?: any) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .createOneBasePropertiesCrudControllerPropertyDto(propertyCreateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one PropertyDto
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public deleteOneBasePropertiesCrudControllerPropertyDto(id: string, options?: any) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .deleteOneBasePropertiesCrudControllerPropertyDto(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many PropertyDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public getManyBasePropertiesCrudControllerPropertyDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .getManyBasePropertiesCrudControllerPropertyDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one PropertyDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public getOneBasePropertiesCrudControllerPropertyDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .getOneBasePropertiesCrudControllerPropertyDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create signed url to property document
   * @param {SignedUrlDocumentBodyDto} signedUrlDocumentBodyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public propertiesControllerCreateSignedUrlForPropertyDocument(
    signedUrlDocumentBodyDto: SignedUrlDocumentBodyDto,
    options?: any,
  ) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .propertiesControllerCreateSignedUrlForPropertyDocument(signedUrlDocumentBodyDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create signed url to property photo
   * @param {SignedUrlPhotoBodyDto} signedUrlPhotoBodyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public propertiesControllerCreateSignedUrlForPropertyPhoto(
    signedUrlPhotoBodyDto: SignedUrlPhotoBodyDto,
    options?: any,
  ) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .propertiesControllerCreateSignedUrlForPropertyPhoto(signedUrlPhotoBodyDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create signed url to property video
   * @param {SignedUrlVideoBodyDto} signedUrlVideoBodyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public propertiesControllerCreateSignedUrlForPropertyVideo(
    signedUrlVideoBodyDto: SignedUrlVideoBodyDto,
    options?: any,
  ) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .propertiesControllerCreateSignedUrlForPropertyVideo(signedUrlVideoBodyDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one PropertyDto
   * @param {string} id
   * @param {PropertyUpdateDto} propertyUpdateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertiesApi
   */
  public updateOneBasePropertiesCrudControllerPropertyDto(
    id: string,
    propertyUpdateDto: PropertyUpdateDto,
    options?: any,
  ) {
    return AdminPanelPropertiesApiFp(this.configuration)
      .updateOneBasePropertiesCrudControllerPropertyDto(id, propertyUpdateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelPropertyAdvantagesApi - axios parameter creator
 * @export
 */
export const AdminPanelPropertyAdvantagesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create one PropertyAdvantagesDto
     * @param {PropertyAdvantagesCreateDto} propertyAdvantagesCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto: async (
      propertyAdvantagesCreateDto: PropertyAdvantagesCreateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'propertyAdvantagesCreateDto' is not null or undefined
      assertParamExists(
        'createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto',
        'propertyAdvantagesCreateDto',
        propertyAdvantagesCreateDto,
      );
      const localVarPath = `/admin-panel/property-advantages`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        propertyAdvantagesCreateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one PropertyAdvantagesDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto', 'id', id);
      const localVarPath = `/admin-panel/property-advantages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many PropertyAdvantagesDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/property-advantages`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one PropertyAdvantagesDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto', 'id', id);
      const localVarPath = `/admin-panel/property-advantages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one PropertyAdvantagesDto
     * @param {string} id
     * @param {PropertyAdvantagesUpdateDto} propertyAdvantagesUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto: async (
      id: string,
      propertyAdvantagesUpdateDto: PropertyAdvantagesUpdateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto', 'id', id);
      // verify required parameter 'propertyAdvantagesUpdateDto' is not null or undefined
      assertParamExists(
        'updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto',
        'propertyAdvantagesUpdateDto',
        propertyAdvantagesUpdateDto,
      );
      const localVarPath = `/admin-panel/property-advantages/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        propertyAdvantagesUpdateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelPropertyAdvantagesApi - functional programming interface
 * @export
 */
export const AdminPanelPropertyAdvantagesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelPropertyAdvantagesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create one PropertyAdvantagesDto
     * @param {PropertyAdvantagesCreateDto} propertyAdvantagesCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      propertyAdvantagesCreateDto: PropertyAdvantagesCreateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyAdvantagesDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
        propertyAdvantagesCreateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete one PropertyAdvantagesDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many PropertyAdvantagesDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetManyPropertyAdvantagesDtoResponseDto | Array<PropertyAdvantagesDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one PropertyAdvantagesDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyAdvantagesDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update one PropertyAdvantagesDto
     * @param {string} id
     * @param {PropertyAdvantagesUpdateDto} propertyAdvantagesUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      id: string,
      propertyAdvantagesUpdateDto: PropertyAdvantagesUpdateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyAdvantagesDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
        id,
        propertyAdvantagesUpdateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelPropertyAdvantagesApi - factory interface
 * @export
 */
export const AdminPanelPropertyAdvantagesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelPropertyAdvantagesApiFp(configuration);
  return {
    /**
     *
     * @summary Create one PropertyAdvantagesDto
     * @param {PropertyAdvantagesCreateDto} propertyAdvantagesCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      propertyAdvantagesCreateDto: PropertyAdvantagesCreateDto,
      options?: any,
    ): AxiosPromise<PropertyAdvantagesDto> {
      return localVarFp
        .createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(propertyAdvantagesCreateDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one PropertyAdvantagesDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many PropertyAdvantagesDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyPropertyAdvantagesDtoResponseDto | Array<PropertyAdvantagesDto>> {
      return localVarFp
        .getManyBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one PropertyAdvantagesDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<PropertyAdvantagesDto> {
      return localVarFp
        .getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one PropertyAdvantagesDto
     * @param {string} id
     * @param {PropertyAdvantagesUpdateDto} propertyAdvantagesUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
      id: string,
      propertyAdvantagesUpdateDto: PropertyAdvantagesUpdateDto,
      options?: any,
    ): AxiosPromise<PropertyAdvantagesDto> {
      return localVarFp
        .updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id, propertyAdvantagesUpdateDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelPropertyAdvantagesApi - object-oriented interface
 * @export
 * @class AdminPanelPropertyAdvantagesApi
 * @extends {BaseAPI}
 */
export class AdminPanelPropertyAdvantagesApi extends BaseAPI {
  /**
   *
   * @summary Create one PropertyAdvantagesDto
   * @param {PropertyAdvantagesCreateDto} propertyAdvantagesCreateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyAdvantagesApi
   */
  public createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
    propertyAdvantagesCreateDto: PropertyAdvantagesCreateDto,
    options?: any,
  ) {
    return AdminPanelPropertyAdvantagesApiFp(this.configuration)
      .createOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(propertyAdvantagesCreateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one PropertyAdvantagesDto
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyAdvantagesApi
   */
  public deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id: string, options?: any) {
    return AdminPanelPropertyAdvantagesApiFp(this.configuration)
      .deleteOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many PropertyAdvantagesDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyAdvantagesApi
   */
  public getManyBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertyAdvantagesApiFp(this.configuration)
      .getManyBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one PropertyAdvantagesDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyAdvantagesApi
   */
  public getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertyAdvantagesApiFp(this.configuration)
      .getOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one PropertyAdvantagesDto
   * @param {string} id
   * @param {PropertyAdvantagesUpdateDto} propertyAdvantagesUpdateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyAdvantagesApi
   */
  public updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(
    id: string,
    propertyAdvantagesUpdateDto: PropertyAdvantagesUpdateDto,
    options?: any,
  ) {
    return AdminPanelPropertyAdvantagesApiFp(this.configuration)
      .updateOneBasePropertyAdvantagesCrudControllerPropertyAdvantagesDto(id, propertyAdvantagesUpdateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelPropertyDividendsApi - axios parameter creator
 * @export
 */
export const AdminPanelPropertyDividendsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve many PropertyDividendsDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertyDividendsCrudControllerPropertyDividendsDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/property-dividends`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one PropertyDividendsDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertyDividendsCrudControllerPropertyDividendsDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBasePropertyDividendsCrudControllerPropertyDividendsDto', 'id', id);
      const localVarPath = `/admin-panel/property-dividends/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelPropertyDividendsApi - functional programming interface
 * @export
 */
export const AdminPanelPropertyDividendsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelPropertyDividendsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve many PropertyDividendsDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBasePropertyDividendsCrudControllerPropertyDividendsDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetManyPropertyDividendsDtoResponseDto | Array<PropertyDividendsDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBasePropertyDividendsCrudControllerPropertyDividendsDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one PropertyDividendsDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBasePropertyDividendsCrudControllerPropertyDividendsDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDividendsDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBasePropertyDividendsCrudControllerPropertyDividendsDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelPropertyDividendsApi - factory interface
 * @export
 */
export const AdminPanelPropertyDividendsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelPropertyDividendsApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve many PropertyDividendsDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertyDividendsCrudControllerPropertyDividendsDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyPropertyDividendsDtoResponseDto | Array<PropertyDividendsDto>> {
      return localVarFp
        .getManyBasePropertyDividendsCrudControllerPropertyDividendsDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one PropertyDividendsDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertyDividendsCrudControllerPropertyDividendsDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<PropertyDividendsDto> {
      return localVarFp
        .getOneBasePropertyDividendsCrudControllerPropertyDividendsDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelPropertyDividendsApi - object-oriented interface
 * @export
 * @class AdminPanelPropertyDividendsApi
 * @extends {BaseAPI}
 */
export class AdminPanelPropertyDividendsApi extends BaseAPI {
  /**
   *
   * @summary Retrieve many PropertyDividendsDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyDividendsApi
   */
  public getManyBasePropertyDividendsCrudControllerPropertyDividendsDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertyDividendsApiFp(this.configuration)
      .getManyBasePropertyDividendsCrudControllerPropertyDividendsDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one PropertyDividendsDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyDividendsApi
   */
  public getOneBasePropertyDividendsCrudControllerPropertyDividendsDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertyDividendsApiFp(this.configuration)
      .getOneBasePropertyDividendsCrudControllerPropertyDividendsDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelPropertyMonthlyUpdatesApi - axios parameter creator
 * @export
 */
export const AdminPanelPropertyMonthlyUpdatesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create one PropertyMonthlyUpdateDto
     * @param {PropertyMonthlyUpdateCreateDto} propertyMonthlyUpdateCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto: async (
      propertyMonthlyUpdateCreateDto: PropertyMonthlyUpdateCreateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'propertyMonthlyUpdateCreateDto' is not null or undefined
      assertParamExists(
        'createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto',
        'propertyMonthlyUpdateCreateDto',
        propertyMonthlyUpdateCreateDto,
      );
      const localVarPath = `/admin-panel/property-monthly-updates`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        propertyMonthlyUpdateCreateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto', 'id', id);
      const localVarPath = `/admin-panel/property-monthly-updates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many PropertyMonthlyUpdateDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/property-monthly-updates`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto', 'id', id);
      const localVarPath = `/admin-panel/property-monthly-updates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {PropertyMonthlyUpdateUpdateDto} propertyMonthlyUpdateUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto: async (
      id: string,
      propertyMonthlyUpdateUpdateDto: PropertyMonthlyUpdateUpdateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto', 'id', id);
      // verify required parameter 'propertyMonthlyUpdateUpdateDto' is not null or undefined
      assertParamExists(
        'updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto',
        'propertyMonthlyUpdateUpdateDto',
        propertyMonthlyUpdateUpdateDto,
      );
      const localVarPath = `/admin-panel/property-monthly-updates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        propertyMonthlyUpdateUpdateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelPropertyMonthlyUpdatesApi - functional programming interface
 * @export
 */
export const AdminPanelPropertyMonthlyUpdatesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelPropertyMonthlyUpdatesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create one PropertyMonthlyUpdateDto
     * @param {PropertyMonthlyUpdateCreateDto} propertyMonthlyUpdateCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      propertyMonthlyUpdateCreateDto: PropertyMonthlyUpdateCreateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyMonthlyUpdateDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        propertyMonthlyUpdateCreateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many PropertyMonthlyUpdateDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetManyPropertyMonthlyUpdateDtoResponseDto | Array<PropertyMonthlyUpdateDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyMonthlyUpdateDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {PropertyMonthlyUpdateUpdateDto} propertyMonthlyUpdateUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      id: string,
      propertyMonthlyUpdateUpdateDto: PropertyMonthlyUpdateUpdateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyMonthlyUpdateDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        id,
        propertyMonthlyUpdateUpdateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelPropertyMonthlyUpdatesApi - factory interface
 * @export
 */
export const AdminPanelPropertyMonthlyUpdatesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelPropertyMonthlyUpdatesApiFp(configuration);
  return {
    /**
     *
     * @summary Create one PropertyMonthlyUpdateDto
     * @param {PropertyMonthlyUpdateCreateDto} propertyMonthlyUpdateCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      propertyMonthlyUpdateCreateDto: PropertyMonthlyUpdateCreateDto,
      options?: any,
    ): AxiosPromise<PropertyMonthlyUpdateDto> {
      return localVarFp
        .createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
          propertyMonthlyUpdateCreateDto,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      id: string,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many PropertyMonthlyUpdateDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyPropertyMonthlyUpdateDtoResponseDto | Array<PropertyMonthlyUpdateDto>> {
      return localVarFp
        .getManyBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<PropertyMonthlyUpdateDto> {
      return localVarFp
        .getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one PropertyMonthlyUpdateDto
     * @param {string} id
     * @param {PropertyMonthlyUpdateUpdateDto} propertyMonthlyUpdateUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
      id: string,
      propertyMonthlyUpdateUpdateDto: PropertyMonthlyUpdateUpdateDto,
      options?: any,
    ): AxiosPromise<PropertyMonthlyUpdateDto> {
      return localVarFp
        .updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
          id,
          propertyMonthlyUpdateUpdateDto,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelPropertyMonthlyUpdatesApi - object-oriented interface
 * @export
 * @class AdminPanelPropertyMonthlyUpdatesApi
 * @extends {BaseAPI}
 */
export class AdminPanelPropertyMonthlyUpdatesApi extends BaseAPI {
  /**
   *
   * @summary Create one PropertyMonthlyUpdateDto
   * @param {PropertyMonthlyUpdateCreateDto} propertyMonthlyUpdateCreateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyMonthlyUpdatesApi
   */
  public createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
    propertyMonthlyUpdateCreateDto: PropertyMonthlyUpdateCreateDto,
    options?: any,
  ) {
    return AdminPanelPropertyMonthlyUpdatesApiFp(this.configuration)
      .createOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        propertyMonthlyUpdateCreateDto,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one PropertyMonthlyUpdateDto
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyMonthlyUpdatesApi
   */
  public deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(id: string, options?: any) {
    return AdminPanelPropertyMonthlyUpdatesApiFp(this.configuration)
      .deleteOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many PropertyMonthlyUpdateDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyMonthlyUpdatesApi
   */
  public getManyBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertyMonthlyUpdatesApiFp(this.configuration)
      .getManyBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one PropertyMonthlyUpdateDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyMonthlyUpdatesApi
   */
  public getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelPropertyMonthlyUpdatesApiFp(this.configuration)
      .getOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one PropertyMonthlyUpdateDto
   * @param {string} id
   * @param {PropertyMonthlyUpdateUpdateDto} propertyMonthlyUpdateUpdateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelPropertyMonthlyUpdatesApi
   */
  public updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
    id: string,
    propertyMonthlyUpdateUpdateDto: PropertyMonthlyUpdateUpdateDto,
    options?: any,
  ) {
    return AdminPanelPropertyMonthlyUpdatesApiFp(this.configuration)
      .updateOneBasePropertyMonthlyUpdatesCrudControllerPropertyMonthlyUpdateDto(
        id,
        propertyMonthlyUpdateUpdateDto,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelWalletRequestsApi - axios parameter creator
 * @export
 */
export const AdminPanelWalletRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve many WalletRequestDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseWalletRequestsCrudControllerWalletRequestDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/wallet-requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one WalletRequestDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseWalletRequestsCrudControllerWalletRequestDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBaseWalletRequestsCrudControllerWalletRequestDto', 'id', id);
      const localVarPath = `/admin-panel/wallet-requests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update one WalletRequestDto
     * @param {string} id
     * @param {WalletRequestUpdateDto} walletRequestUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseWalletRequestsCrudControllerWalletRequestDto: async (
      id: string,
      walletRequestUpdateDto: WalletRequestUpdateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateOneBaseWalletRequestsCrudControllerWalletRequestDto', 'id', id);
      // verify required parameter 'walletRequestUpdateDto' is not null or undefined
      assertParamExists(
        'updateOneBaseWalletRequestsCrudControllerWalletRequestDto',
        'walletRequestUpdateDto',
        walletRequestUpdateDto,
      );
      const localVarPath = `/admin-panel/wallet-requests/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        walletRequestUpdateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelWalletRequestsApi - functional programming interface
 * @export
 */
export const AdminPanelWalletRequestsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelWalletRequestsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve many WalletRequestDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseWalletRequestsCrudControllerWalletRequestDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetManyWalletRequestDtoResponseDto | Array<WalletRequestDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseWalletRequestsCrudControllerWalletRequestDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one WalletRequestDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBaseWalletRequestsCrudControllerWalletRequestDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletRequestDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseWalletRequestsCrudControllerWalletRequestDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update one WalletRequestDto
     * @param {string} id
     * @param {WalletRequestUpdateDto} walletRequestUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOneBaseWalletRequestsCrudControllerWalletRequestDto(
      id: string,
      walletRequestUpdateDto: WalletRequestUpdateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletRequestDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOneBaseWalletRequestsCrudControllerWalletRequestDto(
        id,
        walletRequestUpdateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelWalletRequestsApi - factory interface
 * @export
 */
export const AdminPanelWalletRequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelWalletRequestsApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve many WalletRequestDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseWalletRequestsCrudControllerWalletRequestDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyWalletRequestDtoResponseDto | Array<WalletRequestDto>> {
      return localVarFp
        .getManyBaseWalletRequestsCrudControllerWalletRequestDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one WalletRequestDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseWalletRequestsCrudControllerWalletRequestDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<WalletRequestDto> {
      return localVarFp
        .getOneBaseWalletRequestsCrudControllerWalletRequestDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update one WalletRequestDto
     * @param {string} id
     * @param {WalletRequestUpdateDto} walletRequestUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOneBaseWalletRequestsCrudControllerWalletRequestDto(
      id: string,
      walletRequestUpdateDto: WalletRequestUpdateDto,
      options?: any,
    ): AxiosPromise<WalletRequestDto> {
      return localVarFp
        .updateOneBaseWalletRequestsCrudControllerWalletRequestDto(id, walletRequestUpdateDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelWalletRequestsApi - object-oriented interface
 * @export
 * @class AdminPanelWalletRequestsApi
 * @extends {BaseAPI}
 */
export class AdminPanelWalletRequestsApi extends BaseAPI {
  /**
   *
   * @summary Retrieve many WalletRequestDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelWalletRequestsApi
   */
  public getManyBaseWalletRequestsCrudControllerWalletRequestDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelWalletRequestsApiFp(this.configuration)
      .getManyBaseWalletRequestsCrudControllerWalletRequestDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one WalletRequestDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelWalletRequestsApi
   */
  public getOneBaseWalletRequestsCrudControllerWalletRequestDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelWalletRequestsApiFp(this.configuration)
      .getOneBaseWalletRequestsCrudControllerWalletRequestDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update one WalletRequestDto
   * @param {string} id
   * @param {WalletRequestUpdateDto} walletRequestUpdateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelWalletRequestsApi
   */
  public updateOneBaseWalletRequestsCrudControllerWalletRequestDto(
    id: string,
    walletRequestUpdateDto: WalletRequestUpdateDto,
    options?: any,
  ) {
    return AdminPanelWalletRequestsApiFp(this.configuration)
      .updateOneBaseWalletRequestsCrudControllerWalletRequestDto(id, walletRequestUpdateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminPanelWalletTransactionsApi - axios parameter creator
 * @export
 */
export const AdminPanelWalletTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve many WalletTransactionDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseWalletTransactionsCrudControllerWalletTransactionDto: async (
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-panel/wallet-transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (s !== undefined) {
        localVarQueryParameter['s'] = s;
      }

      if (filter) {
        localVarQueryParameter['filter'] = filter;
      }

      if (or) {
        localVarQueryParameter['or'] = or;
      }

      if (sort) {
        localVarQueryParameter['sort'] = sort;
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one WalletTransactionDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseWalletTransactionsCrudControllerWalletTransactionDto: async (
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOneBaseWalletTransactionsCrudControllerWalletTransactionDto', 'id', id);
      const localVarPath = `/admin-panel/wallet-transactions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (fields) {
        localVarQueryParameter['fields'] = fields.join(COLLECTION_FORMATS.csv);
      }

      if (join) {
        localVarQueryParameter['join'] = join;
      }

      if (cache !== undefined) {
        localVarQueryParameter['cache'] = cache;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create dividends transaction
     * @param {WalletTransactionCreateDividendsDto} walletTransactionCreateDividendsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactionsControllerCreateWalletTransactionsDividends: async (
      walletTransactionCreateDividendsDto: WalletTransactionCreateDividendsDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'walletTransactionCreateDividendsDto' is not null or undefined
      assertParamExists(
        'walletTransactionsControllerCreateWalletTransactionsDividends',
        'walletTransactionCreateDividendsDto',
        walletTransactionCreateDividendsDto,
      );
      const localVarPath = `/admin-panel/wallet-transactions/dividends`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        walletTransactionCreateDividendsDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminPanelWalletTransactionsApi - functional programming interface
 * @export
 */
export const AdminPanelWalletTransactionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminPanelWalletTransactionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve many WalletTransactionDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getManyBaseWalletTransactionsCrudControllerWalletTransactionDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetManyWalletTransactionDtoResponseDto | Array<WalletTransactionDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getManyBaseWalletTransactionsCrudControllerWalletTransactionDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one WalletTransactionDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOneBaseWalletTransactionsCrudControllerWalletTransactionDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOneBaseWalletTransactionsCrudControllerWalletTransactionDto(
        id,
        fields,
        join,
        cache,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create dividends transaction
     * @param {WalletTransactionCreateDividendsDto} walletTransactionCreateDividendsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async walletTransactionsControllerCreateWalletTransactionsDividends(
      walletTransactionCreateDividendsDto: WalletTransactionCreateDividendsDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionDividendsRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionsControllerCreateWalletTransactionsDividends(
        walletTransactionCreateDividendsDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminPanelWalletTransactionsApi - factory interface
 * @export
 */
export const AdminPanelWalletTransactionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminPanelWalletTransactionsApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve many WalletTransactionDto
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getManyBaseWalletTransactionsCrudControllerWalletTransactionDto(
      fields?: Array<string>,
      s?: string,
      filter?: Array<string>,
      or?: Array<string>,
      sort?: Array<string>,
      join?: Array<string>,
      limit?: number,
      offset?: number,
      page?: number,
      cache?: number,
      options?: any,
    ): AxiosPromise<GetManyWalletTransactionDtoResponseDto | Array<WalletTransactionDto>> {
      return localVarFp
        .getManyBaseWalletTransactionsCrudControllerWalletTransactionDto(
          fields,
          s,
          filter,
          or,
          sort,
          join,
          limit,
          offset,
          page,
          cache,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one WalletTransactionDto
     * @param {string} id
     * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOneBaseWalletTransactionsCrudControllerWalletTransactionDto(
      id: string,
      fields?: Array<string>,
      join?: Array<string>,
      cache?: number,
      options?: any,
    ): AxiosPromise<WalletTransactionDto> {
      return localVarFp
        .getOneBaseWalletTransactionsCrudControllerWalletTransactionDto(id, fields, join, cache, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create dividends transaction
     * @param {WalletTransactionCreateDividendsDto} walletTransactionCreateDividendsDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactionsControllerCreateWalletTransactionsDividends(
      walletTransactionCreateDividendsDto: WalletTransactionCreateDividendsDto,
      options?: any,
    ): AxiosPromise<WalletTransactionDividendsRes> {
      return localVarFp
        .walletTransactionsControllerCreateWalletTransactionsDividends(walletTransactionCreateDividendsDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminPanelWalletTransactionsApi - object-oriented interface
 * @export
 * @class AdminPanelWalletTransactionsApi
 * @extends {BaseAPI}
 */
export class AdminPanelWalletTransactionsApi extends BaseAPI {
  /**
   *
   * @summary Retrieve many WalletTransactionDto
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {string} [s] Adds search condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#search\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [filter] Adds filter condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#filter\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [or] Adds OR condition. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#or\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [sort] Adds sort by field. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#sort\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [limit] Limit amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#limit\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [offset] Offset amount of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#offset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [page] Page portion of resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#page\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelWalletTransactionsApi
   */
  public getManyBaseWalletTransactionsCrudControllerWalletTransactionDto(
    fields?: Array<string>,
    s?: string,
    filter?: Array<string>,
    or?: Array<string>,
    sort?: Array<string>,
    join?: Array<string>,
    limit?: number,
    offset?: number,
    page?: number,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelWalletTransactionsApiFp(this.configuration)
      .getManyBaseWalletTransactionsCrudControllerWalletTransactionDto(
        fields,
        s,
        filter,
        or,
        sort,
        join,
        limit,
        offset,
        page,
        cache,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one WalletTransactionDto
   * @param {string} id
   * @param {Array<string>} [fields] Selects resource fields. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#select\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {Array<string>} [join] Adds relational resources. &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#join\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {number} [cache] Reset cache (if was enabled). &lt;a href&#x3D;\&quot;https://github.com/nestjsx/crud/wiki/Requests#cache\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Docs&lt;/a&gt;
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelWalletTransactionsApi
   */
  public getOneBaseWalletTransactionsCrudControllerWalletTransactionDto(
    id: string,
    fields?: Array<string>,
    join?: Array<string>,
    cache?: number,
    options?: any,
  ) {
    return AdminPanelWalletTransactionsApiFp(this.configuration)
      .getOneBaseWalletTransactionsCrudControllerWalletTransactionDto(id, fields, join, cache, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create dividends transaction
   * @param {WalletTransactionCreateDividendsDto} walletTransactionCreateDividendsDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminPanelWalletTransactionsApi
   */
  public walletTransactionsControllerCreateWalletTransactionsDividends(
    walletTransactionCreateDividendsDto: WalletTransactionCreateDividendsDto,
    options?: any,
  ) {
    return AdminPanelWalletTransactionsApiFp(this.configuration)
      .walletTransactionsControllerCreateWalletTransactionsDividends(walletTransactionCreateDividendsDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Check admin email for uniqueness
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminsControllerEmailIsUniq: async (email: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'email' is not null or undefined
      assertParamExists('adminsControllerEmailIsUniq', 'email', email);
      const localVarPath = `/admins/email-is-uniq`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (email !== undefined) {
        localVarQueryParameter['email'] = email;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve current admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminsControllerGetMe: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/admins/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign in via email/password
     * @param {AdminSignInBodyDto} adminSignInBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminsControllerSignIn: async (adminSignInBodyDto: AdminSignInBodyDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'adminSignInBodyDto' is not null or undefined
      assertParamExists('adminsControllerSignIn', 'adminSignInBodyDto', adminSignInBodyDto);
      const localVarPath = `/admins/sign-in`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(adminSignInBodyDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Check admin email for uniqueness
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminsControllerEmailIsUniq(
      email: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminsControllerEmailIsUniq(email, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve current admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminsControllerGetMe(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminsControllerGetMe(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Sign in via email/password
     * @param {AdminSignInBodyDto} adminSignInBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminsControllerSignIn(
      adminSignInBodyDto: AdminSignInBodyDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAdminDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminsControllerSignIn(adminSignInBodyDto, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AdminsApiFp(configuration);
  return {
    /**
     *
     * @summary Check admin email for uniqueness
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminsControllerEmailIsUniq(email: string, options?: any): AxiosPromise<boolean> {
      return localVarFp.adminsControllerEmailIsUniq(email, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve current admin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminsControllerGetMe(options?: any): AxiosPromise<AdminDto> {
      return localVarFp.adminsControllerGetMe(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign in via email/password
     * @param {AdminSignInBodyDto} adminSignInBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminsControllerSignIn(adminSignInBodyDto: AdminSignInBodyDto, options?: any): AxiosPromise<AuthAdminDto> {
      return localVarFp.adminsControllerSignIn(adminSignInBodyDto, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
  /**
   *
   * @summary Check admin email for uniqueness
   * @param {string} email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminsApi
   */
  public adminsControllerEmailIsUniq(email: string, options?: any) {
    return AdminsApiFp(this.configuration)
      .adminsControllerEmailIsUniq(email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve current admin
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminsApi
   */
  public adminsControllerGetMe(options?: any) {
    return AdminsApiFp(this.configuration)
      .adminsControllerGetMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign in via email/password
   * @param {AdminSignInBodyDto} adminSignInBodyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminsApi
   */
  public adminsControllerSignIn(adminSignInBodyDto: AdminSignInBodyDto, options?: any) {
    return AdminsApiFp(this.configuration)
      .adminsControllerSignIn(adminSignInBodyDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BrickPriceApi - axios parameter creator
 * @export
 */
export const BrickPriceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve many Brick Prices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    brickPriceControllerGetBrickPrices: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/brick-prices`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BrickPriceApi - functional programming interface
 * @export
 */
export const BrickPriceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BrickPriceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve many Brick Prices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async brickPriceControllerGetBrickPrices(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrickPriceDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.brickPriceControllerGetBrickPrices(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * BrickPriceApi - factory interface
 * @export
 */
export const BrickPriceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = BrickPriceApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve many Brick Prices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    brickPriceControllerGetBrickPrices(options?: any): AxiosPromise<BrickPriceDto> {
      return localVarFp.brickPriceControllerGetBrickPrices(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * BrickPriceApi - object-oriented interface
 * @export
 * @class BrickPriceApi
 * @extends {BaseAPI}
 */
export class BrickPriceApi extends BaseAPI {
  /**
   *
   * @summary Retrieve many Brick Prices
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BrickPriceApi
   */
  public brickPriceControllerGetBrickPrices(options?: any) {
    return BrickPriceApiFp(this.configuration)
      .brickPriceControllerGetBrickPrices(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BricksTransactionsApi - axios parameter creator
 * @export
 */
export const BricksTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create bricks transaction
     * @param {BricksTransactionCreateDto} bricksTransactionCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bricksTransactionsControllerCreateBricksTransaction: async (
      bricksTransactionCreateDto: BricksTransactionCreateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'bricksTransactionCreateDto' is not null or undefined
      assertParamExists(
        'bricksTransactionsControllerCreateBricksTransaction',
        'bricksTransactionCreateDto',
        bricksTransactionCreateDto,
      );
      const localVarPath = `/bricks-transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bricksTransactionCreateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one Bricks Transaction by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bricksTransactionsControllerGetBricksTransaction: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('bricksTransactionsControllerGetBricksTransaction', 'id', id);
      const localVarPath = `/bricks-transactions/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many Bricks Transactions
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bricksTransactionsControllerGetBricksTransactions: async (
      cursor?: string,
      take?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/bricks-transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (take !== undefined) {
        localVarQueryParameter['take'] = take;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BricksTransactionsApi - functional programming interface
 * @export
 */
export const BricksTransactionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BricksTransactionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create bricks transaction
     * @param {BricksTransactionCreateDto} bricksTransactionCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bricksTransactionsControllerCreateBricksTransaction(
      bricksTransactionCreateDto: BricksTransactionCreateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BricksTransactionDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bricksTransactionsControllerCreateBricksTransaction(
        bricksTransactionCreateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one Bricks Transaction by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bricksTransactionsControllerGetBricksTransaction(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BricksTransactionDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bricksTransactionsControllerGetBricksTransaction(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many Bricks Transactions
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async bricksTransactionsControllerGetBricksTransactions(
      cursor?: string,
      take?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BricksTransactionDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.bricksTransactionsControllerGetBricksTransactions(
        cursor,
        take,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * BricksTransactionsApi - factory interface
 * @export
 */
export const BricksTransactionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BricksTransactionsApiFp(configuration);
  return {
    /**
     *
     * @summary Create bricks transaction
     * @param {BricksTransactionCreateDto} bricksTransactionCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bricksTransactionsControllerCreateBricksTransaction(
      bricksTransactionCreateDto: BricksTransactionCreateDto,
      options?: any,
    ): AxiosPromise<BricksTransactionDto> {
      return localVarFp
        .bricksTransactionsControllerCreateBricksTransaction(bricksTransactionCreateDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one Bricks Transaction by id
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bricksTransactionsControllerGetBricksTransaction(id: string, options?: any): AxiosPromise<BricksTransactionDto> {
      return localVarFp
        .bricksTransactionsControllerGetBricksTransaction(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many Bricks Transactions
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bricksTransactionsControllerGetBricksTransactions(
      cursor?: string,
      take?: number,
      options?: any,
    ): AxiosPromise<BricksTransactionDto> {
      return localVarFp
        .bricksTransactionsControllerGetBricksTransactions(cursor, take, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BricksTransactionsApi - object-oriented interface
 * @export
 * @class BricksTransactionsApi
 * @extends {BaseAPI}
 */
export class BricksTransactionsApi extends BaseAPI {
  /**
   *
   * @summary Create bricks transaction
   * @param {BricksTransactionCreateDto} bricksTransactionCreateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BricksTransactionsApi
   */
  public bricksTransactionsControllerCreateBricksTransaction(
    bricksTransactionCreateDto: BricksTransactionCreateDto,
    options?: any,
  ) {
    return BricksTransactionsApiFp(this.configuration)
      .bricksTransactionsControllerCreateBricksTransaction(bricksTransactionCreateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one Bricks Transaction by id
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BricksTransactionsApi
   */
  public bricksTransactionsControllerGetBricksTransaction(id: string, options?: any) {
    return BricksTransactionsApiFp(this.configuration)
      .bricksTransactionsControllerGetBricksTransaction(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many Bricks Transactions
   * @param {string} [cursor]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BricksTransactionsApi
   */
  public bricksTransactionsControllerGetBricksTransactions(cursor?: string, take?: number, options?: any) {
    return BricksTransactionsApiFp(this.configuration)
      .bricksTransactionsControllerGetBricksTransactions(cursor, take, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CustomersApi - axios parameter creator
 * @export
 */
export const CustomersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Add customer payment method
     * @param {CustomerAddCardDto} customerAddCardDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerAddCustomerPaymentMethod: async (
      customerAddCardDto: CustomerAddCardDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerAddCardDto' is not null or undefined
      assertParamExists('customersControllerAddCustomerPaymentMethod', 'customerAddCardDto', customerAddCardDto);
      const localVarPath = `/customers/stripe/add-payment-method`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(customerAddCardDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create customer profile
     * @param {CustomerProfileCreateDto} customerProfileCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerCreateProfile: async (
      customerProfileCreateDto: CustomerProfileCreateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerProfileCreateDto' is not null or undefined
      assertParamExists('customersControllerCreateProfile', 'customerProfileCreateDto', customerProfileCreateDto);
      const localVarPath = `/customers/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        customerProfileCreateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create signed url to customer document
     * @param {CustomerSignedUrlDocumentBodyDto} customerSignedUrlDocumentBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerCreateSignedUrlForPropertyDocument: async (
      customerSignedUrlDocumentBodyDto: CustomerSignedUrlDocumentBodyDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerSignedUrlDocumentBodyDto' is not null or undefined
      assertParamExists(
        'customersControllerCreateSignedUrlForPropertyDocument',
        'customerSignedUrlDocumentBodyDto',
        customerSignedUrlDocumentBodyDto,
      );
      const localVarPath = `/customers/document-signed-url`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        customerSignedUrlDocumentBodyDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete customer payment method
     * @param {string} paymentMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerDeleteCustomerPaymentMethod: async (
      paymentMethodId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentMethodId' is not null or undefined
      assertParamExists('customersControllerDeleteCustomerPaymentMethod', 'paymentMethodId', paymentMethodId);
      const localVarPath = `/customers/stripe/delete-payment-method`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (paymentMethodId !== undefined) {
        localVarQueryParameter['paymentMethodId'] = paymentMethodId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve customer balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetBalance: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/customers/balance`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get dashboard customer percent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetDashboardStatistic: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/customers/dashboard-statistic`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve historical rental dividends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetDividendsChart: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/customers/historical-dividends-chart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve current customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetMe: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/customers/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve historical value of my portfolio Dividends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetPortfolioChart: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/customers/historical-portfolio-chart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve customer profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetProfiles: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/customers/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many  customer Properties
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetProperties: async (
      cursor?: string,
      take?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/customers/properties`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (take !== undefined) {
        localVarQueryParameter['take'] = take;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many Pending Investments Properties
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetPropertiesPendingInvestments: async (
      cursor?: string,
      take?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/customers/properties/pending-investments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (take !== undefined) {
        localVarQueryParameter['take'] = take;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve customer property info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetProperty: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('customersControllerGetProperty', 'id', id);
      const localVarPath = `/customers/properties/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve Pending Investments Property info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetPropertyPendingInvestments: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('customersControllerGetPropertyPendingInvestments', 'id', id);
      const localVarPath = `/customers/properties/{id}/pending-investments`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Password recovery
     * @param {CustomerRecoveryPasswordDto} customerRecoveryPasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerPasswordRecovery: async (
      customerRecoveryPasswordDto: CustomerRecoveryPasswordDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerRecoveryPasswordDto' is not null or undefined
      assertParamExists(
        'customersControllerPasswordRecovery',
        'customerRecoveryPasswordDto',
        customerRecoveryPasswordDto,
      );
      const localVarPath = `/customers/password-recovery`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        customerRecoveryPasswordDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign-in with email and retrieve user with bearer token
     * @param {CustomerSigninBodyDto} customerSigninBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerSignIn: async (
      customerSigninBodyDto: CustomerSigninBodyDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerSigninBodyDto' is not null or undefined
      assertParamExists('customersControllerSignIn', 'customerSigninBodyDto', customerSigninBodyDto);
      const localVarPath = `/customers/email/sign-in`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(customerSigninBodyDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign-up with email and retrieve user with bearer token
     * @param {CustomerSigninBodyDto} customerSigninBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerSignUp: async (
      customerSigninBodyDto: CustomerSigninBodyDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerSigninBodyDto' is not null or undefined
      assertParamExists('customersControllerSignUp', 'customerSigninBodyDto', customerSigninBodyDto);
      const localVarPath = `/customers/email/sign-up`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(customerSigninBodyDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create payment intent
     * @param {CustomerPaymentIntentDto} customerPaymentIntentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerStripeCreatePaymentIntent: async (
      customerPaymentIntentDto: CustomerPaymentIntentDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerPaymentIntentDto' is not null or undefined
      assertParamExists(
        'customersControllerStripeCreatePaymentIntent',
        'customerPaymentIntentDto',
        customerPaymentIntentDto,
      );
      const localVarPath = `/customers/stripe/create-payment-intent`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        customerPaymentIntentDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create stripe payment method intent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerStripeCreatePaymentMethod: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/customers/stripe/create-payment-method-intent`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update customer
     * @param {CustomerUpdateDto} customerUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerUpdateCustomer: async (
      customerUpdateDto: CustomerUpdateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerUpdateDto' is not null or undefined
      assertParamExists('customersControllerUpdateCustomer', 'customerUpdateDto', customerUpdateDto);
      const localVarPath = `/customers/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(customerUpdateDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update customer profile
     * @param {CustomerProfileCreateDto} customerProfileCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerUpdateProfile: async (
      customerProfileCreateDto: CustomerProfileCreateDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'customerProfileCreateDto' is not null or undefined
      assertParamExists('customersControllerUpdateProfile', 'customerProfileCreateDto', customerProfileCreateDto);
      const localVarPath = `/customers/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        customerProfileCreateDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CustomersApi - functional programming interface
 * @export
 */
export const CustomersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add customer payment method
     * @param {CustomerAddCardDto} customerAddCardDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerAddCustomerPaymentMethod(
      customerAddCardDto: CustomerAddCardDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethodDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerAddCustomerPaymentMethod(
        customerAddCardDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create customer profile
     * @param {CustomerProfileCreateDto} customerProfileCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerCreateProfile(
      customerProfileCreateDto: CustomerProfileCreateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileCreateDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerCreateProfile(
        customerProfileCreateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create signed url to customer document
     * @param {CustomerSignedUrlDocumentBodyDto} customerSignedUrlDocumentBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerCreateSignedUrlForPropertyDocument(
      customerSignedUrlDocumentBodyDto: CustomerSignedUrlDocumentBodyDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignedUrlResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerCreateSignedUrlForPropertyDocument(
        customerSignedUrlDocumentBodyDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete customer payment method
     * @param {string} paymentMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerDeleteCustomerPaymentMethod(
      paymentMethodId: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerDeleteCustomerPaymentMethod(
        paymentMethodId,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve customer balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetBalance(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerBalanceDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetBalance(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Get dashboard customer percent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetDashboardStatistic(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardStatisticDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetDashboardStatistic(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve historical rental dividends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetDividendsChart(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerChartDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetDividendsChart(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve current customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetMe(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetMe(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve historical value of my portfolio Dividends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetPortfolioChart(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerChartDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetPortfolioChart(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve customer profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetProfiles(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetProfiles(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many  customer Properties
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetProperties(
      cursor?: string,
      take?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetProperties(cursor, take, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many Pending Investments Properties
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetPropertiesPendingInvestments(
      cursor?: string,
      take?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetPropertiesPendingInvestments(
        cursor,
        take,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve customer property info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetProperty(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPropertyResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetProperty(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve Pending Investments Property info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerGetPropertyPendingInvestments(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerPendingPropertyResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerGetPropertyPendingInvestments(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Password recovery
     * @param {CustomerRecoveryPasswordDto} customerRecoveryPasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerPasswordRecovery(
      customerRecoveryPasswordDto: CustomerRecoveryPasswordDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthCustomerDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerPasswordRecovery(
        customerRecoveryPasswordDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Sign-in with email and retrieve user with bearer token
     * @param {CustomerSigninBodyDto} customerSigninBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerSignIn(
      customerSigninBodyDto: CustomerSigninBodyDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthCustomerDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerSignIn(
        customerSigninBodyDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Sign-up with email and retrieve user with bearer token
     * @param {CustomerSigninBodyDto} customerSigninBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerSignUp(
      customerSigninBodyDto: CustomerSigninBodyDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthCustomerDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerSignUp(
        customerSigninBodyDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create payment intent
     * @param {CustomerPaymentIntentDto} customerPaymentIntentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerStripeCreatePaymentIntent(
      customerPaymentIntentDto: CustomerPaymentIntentDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerStripeCreatePaymentIntent(
        customerPaymentIntentDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create stripe payment method intent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerStripeCreatePaymentMethod(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecretKeyResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerStripeCreatePaymentMethod(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update customer
     * @param {CustomerUpdateDto} customerUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerUpdateCustomer(
      customerUpdateDto: CustomerUpdateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthCustomerDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerUpdateCustomer(
        customerUpdateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Update customer profile
     * @param {CustomerProfileCreateDto} customerProfileCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async customersControllerUpdateProfile(
      customerProfileCreateDto: CustomerProfileCreateDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerProfileCreateDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.customersControllerUpdateProfile(
        customerProfileCreateDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CustomersApi - factory interface
 * @export
 */
export const CustomersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = CustomersApiFp(configuration);
  return {
    /**
     *
     * @summary Add customer payment method
     * @param {CustomerAddCardDto} customerAddCardDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerAddCustomerPaymentMethod(
      customerAddCardDto: CustomerAddCardDto,
      options?: any,
    ): AxiosPromise<PaymentMethodDto> {
      return localVarFp
        .customersControllerAddCustomerPaymentMethod(customerAddCardDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create customer profile
     * @param {CustomerProfileCreateDto} customerProfileCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerCreateProfile(
      customerProfileCreateDto: CustomerProfileCreateDto,
      options?: any,
    ): AxiosPromise<CustomerProfileCreateDto> {
      return localVarFp
        .customersControllerCreateProfile(customerProfileCreateDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create signed url to customer document
     * @param {CustomerSignedUrlDocumentBodyDto} customerSignedUrlDocumentBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerCreateSignedUrlForPropertyDocument(
      customerSignedUrlDocumentBodyDto: CustomerSignedUrlDocumentBodyDto,
      options?: any,
    ): AxiosPromise<SignedUrlResDto> {
      return localVarFp
        .customersControllerCreateSignedUrlForPropertyDocument(customerSignedUrlDocumentBodyDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete customer payment method
     * @param {string} paymentMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerDeleteCustomerPaymentMethod(paymentMethodId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .customersControllerDeleteCustomerPaymentMethod(paymentMethodId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve customer balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetBalance(options?: any): AxiosPromise<CustomerBalanceDto> {
      return localVarFp.customersControllerGetBalance(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get dashboard customer percent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetDashboardStatistic(options?: any): AxiosPromise<DashboardStatisticDto> {
      return localVarFp.customersControllerGetDashboardStatistic(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve historical rental dividends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetDividendsChart(options?: any): AxiosPromise<CustomerChartDto> {
      return localVarFp.customersControllerGetDividendsChart(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve current customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetMe(options?: any): AxiosPromise<CustomerDto> {
      return localVarFp.customersControllerGetMe(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve historical value of my portfolio Dividends
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetPortfolioChart(options?: any): AxiosPromise<CustomerChartDto> {
      return localVarFp.customersControllerGetPortfolioChart(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve customer profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetProfiles(options?: any): AxiosPromise<CustomerProfileDto> {
      return localVarFp.customersControllerGetProfiles(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many  customer Properties
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetProperties(cursor?: string, take?: number, options?: any): AxiosPromise<PropertyDto> {
      return localVarFp
        .customersControllerGetProperties(cursor, take, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many Pending Investments Properties
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetPropertiesPendingInvestments(
      cursor?: string,
      take?: number,
      options?: any,
    ): AxiosPromise<PropertyDto> {
      return localVarFp
        .customersControllerGetPropertiesPendingInvestments(cursor, take, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve customer property info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetProperty(id: string, options?: any): AxiosPromise<CustomerPropertyResDto> {
      return localVarFp.customersControllerGetProperty(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve Pending Investments Property info
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerGetPropertyPendingInvestments(
      id: string,
      options?: any,
    ): AxiosPromise<CustomerPendingPropertyResDto> {
      return localVarFp
        .customersControllerGetPropertyPendingInvestments(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Password recovery
     * @param {CustomerRecoveryPasswordDto} customerRecoveryPasswordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerPasswordRecovery(
      customerRecoveryPasswordDto: CustomerRecoveryPasswordDto,
      options?: any,
    ): AxiosPromise<AuthCustomerDto> {
      return localVarFp
        .customersControllerPasswordRecovery(customerRecoveryPasswordDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign-in with email and retrieve user with bearer token
     * @param {CustomerSigninBodyDto} customerSigninBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerSignIn(
      customerSigninBodyDto: CustomerSigninBodyDto,
      options?: any,
    ): AxiosPromise<AuthCustomerDto> {
      return localVarFp
        .customersControllerSignIn(customerSigninBodyDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign-up with email and retrieve user with bearer token
     * @param {CustomerSigninBodyDto} customerSigninBodyDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerSignUp(
      customerSigninBodyDto: CustomerSigninBodyDto,
      options?: any,
    ): AxiosPromise<AuthCustomerDto> {
      return localVarFp
        .customersControllerSignUp(customerSigninBodyDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create payment intent
     * @param {CustomerPaymentIntentDto} customerPaymentIntentDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerStripeCreatePaymentIntent(
      customerPaymentIntentDto: CustomerPaymentIntentDto,
      options?: any,
    ): AxiosPromise<CustomerDto> {
      return localVarFp
        .customersControllerStripeCreatePaymentIntent(customerPaymentIntentDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create stripe payment method intent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerStripeCreatePaymentMethod(options?: any): AxiosPromise<SecretKeyResponseDto> {
      return localVarFp
        .customersControllerStripeCreatePaymentMethod(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update customer
     * @param {CustomerUpdateDto} customerUpdateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerUpdateCustomer(
      customerUpdateDto: CustomerUpdateDto,
      options?: any,
    ): AxiosPromise<AuthCustomerDto> {
      return localVarFp
        .customersControllerUpdateCustomer(customerUpdateDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update customer profile
     * @param {CustomerProfileCreateDto} customerProfileCreateDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    customersControllerUpdateProfile(
      customerProfileCreateDto: CustomerProfileCreateDto,
      options?: any,
    ): AxiosPromise<CustomerProfileCreateDto> {
      return localVarFp
        .customersControllerUpdateProfile(customerProfileCreateDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
export class CustomersApi extends BaseAPI {
  /**
   *
   * @summary Add customer payment method
   * @param {CustomerAddCardDto} customerAddCardDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerAddCustomerPaymentMethod(customerAddCardDto: CustomerAddCardDto, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerAddCustomerPaymentMethod(customerAddCardDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create customer profile
   * @param {CustomerProfileCreateDto} customerProfileCreateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerCreateProfile(customerProfileCreateDto: CustomerProfileCreateDto, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerCreateProfile(customerProfileCreateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create signed url to customer document
   * @param {CustomerSignedUrlDocumentBodyDto} customerSignedUrlDocumentBodyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerCreateSignedUrlForPropertyDocument(
    customerSignedUrlDocumentBodyDto: CustomerSignedUrlDocumentBodyDto,
    options?: any,
  ) {
    return CustomersApiFp(this.configuration)
      .customersControllerCreateSignedUrlForPropertyDocument(customerSignedUrlDocumentBodyDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete customer payment method
   * @param {string} paymentMethodId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerDeleteCustomerPaymentMethod(paymentMethodId: string, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerDeleteCustomerPaymentMethod(paymentMethodId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve customer balance
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetBalance(options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetBalance(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get dashboard customer percent
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetDashboardStatistic(options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetDashboardStatistic(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve historical rental dividends
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetDividendsChart(options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetDividendsChart(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve current customer
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetMe(options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetMe(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve historical value of my portfolio Dividends
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetPortfolioChart(options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetPortfolioChart(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve customer profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetProfiles(options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetProfiles(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many  customer Properties
   * @param {string} [cursor]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetProperties(cursor?: string, take?: number, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetProperties(cursor, take, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many Pending Investments Properties
   * @param {string} [cursor]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetPropertiesPendingInvestments(cursor?: string, take?: number, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetPropertiesPendingInvestments(cursor, take, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve customer property info
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetProperty(id: string, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetProperty(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve Pending Investments Property info
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerGetPropertyPendingInvestments(id: string, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerGetPropertyPendingInvestments(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Password recovery
   * @param {CustomerRecoveryPasswordDto} customerRecoveryPasswordDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerPasswordRecovery(customerRecoveryPasswordDto: CustomerRecoveryPasswordDto, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerPasswordRecovery(customerRecoveryPasswordDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign-in with email and retrieve user with bearer token
   * @param {CustomerSigninBodyDto} customerSigninBodyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerSignIn(customerSigninBodyDto: CustomerSigninBodyDto, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerSignIn(customerSigninBodyDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign-up with email and retrieve user with bearer token
   * @param {CustomerSigninBodyDto} customerSigninBodyDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerSignUp(customerSigninBodyDto: CustomerSigninBodyDto, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerSignUp(customerSigninBodyDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create payment intent
   * @param {CustomerPaymentIntentDto} customerPaymentIntentDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerStripeCreatePaymentIntent(
    customerPaymentIntentDto: CustomerPaymentIntentDto,
    options?: any,
  ) {
    return CustomersApiFp(this.configuration)
      .customersControllerStripeCreatePaymentIntent(customerPaymentIntentDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create stripe payment method intent
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerStripeCreatePaymentMethod(options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerStripeCreatePaymentMethod(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update customer
   * @param {CustomerUpdateDto} customerUpdateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerUpdateCustomer(customerUpdateDto: CustomerUpdateDto, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerUpdateCustomer(customerUpdateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update customer profile
   * @param {CustomerProfileCreateDto} customerProfileCreateDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CustomersApi
   */
  public customersControllerUpdateProfile(customerProfileCreateDto: CustomerProfileCreateDto, options?: any) {
    return CustomersApiFp(this.configuration)
      .customersControllerUpdateProfile(customerProfileCreateDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerCheckApi: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/health`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetHello(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthControllerCheckApi(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerCheckApi(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options?: any): AxiosPromise<string> {
      return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerCheckApi(options?: any): AxiosPromise<InlineResponse200> {
      return localVarFp.healthControllerCheckApi(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public appControllerGetHello(options?: any) {
    return DefaultApiFp(this.configuration)
      .appControllerGetHello(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthControllerCheckApi(options?: any) {
    return DefaultApiFp(this.configuration)
      .healthControllerCheckApi(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PaymentMethodsApi - axios parameter creator
 * @export
 */
export const PaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create customer bank payment method
     * @param {PaymentMethodCreateBankDto} paymentMethodCreateBankDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerCreateBank: async (
      paymentMethodCreateBankDto: PaymentMethodCreateBankDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'paymentMethodCreateBankDto' is not null or undefined
      assertParamExists('paymentMethodsControllerCreateBank', 'paymentMethodCreateBankDto', paymentMethodCreateBankDto);
      const localVarPath = `/payment-methods/bank`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        paymentMethodCreateBankDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete customer payment method
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerDeletePaymentMethod: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('paymentMethodsControllerDeletePaymentMethod', 'id', id);
      const localVarPath = `/payment-methods/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve Payment Methods
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerGetPaymentMethod: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('paymentMethodsControllerGetPaymentMethod', 'id', id);
      const localVarPath = `/payment-methods/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many Payment Methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerGetPaymentMethods: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/payment-methods`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PaymentMethodsApi - functional programming interface
 * @export
 */
export const PaymentMethodsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PaymentMethodsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create customer bank payment method
     * @param {PaymentMethodCreateBankDto} paymentMethodCreateBankDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentMethodsControllerCreateBank(
      paymentMethodCreateBankDto: PaymentMethodCreateBankDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethodCreateBankDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentMethodsControllerCreateBank(
        paymentMethodCreateBankDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Delete customer payment method
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentMethodsControllerDeletePaymentMethod(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentMethodsControllerDeletePaymentMethod(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve Payment Methods
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentMethodsControllerGetPaymentMethod(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethodDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentMethodsControllerGetPaymentMethod(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many Payment Methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async paymentMethodsControllerGetPaymentMethods(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethodDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.paymentMethodsControllerGetPaymentMethods(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PaymentMethodsApi - factory interface
 * @export
 */
export const PaymentMethodsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PaymentMethodsApiFp(configuration);
  return {
    /**
     *
     * @summary Create customer bank payment method
     * @param {PaymentMethodCreateBankDto} paymentMethodCreateBankDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerCreateBank(
      paymentMethodCreateBankDto: PaymentMethodCreateBankDto,
      options?: any,
    ): AxiosPromise<PaymentMethodCreateBankDto> {
      return localVarFp
        .paymentMethodsControllerCreateBank(paymentMethodCreateBankDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete customer payment method
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerDeletePaymentMethod(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .paymentMethodsControllerDeletePaymentMethod(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve Payment Methods
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerGetPaymentMethod(id: string, options?: any): AxiosPromise<PaymentMethodDto> {
      return localVarFp
        .paymentMethodsControllerGetPaymentMethod(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many Payment Methods
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    paymentMethodsControllerGetPaymentMethods(options?: any): AxiosPromise<PaymentMethodDto> {
      return localVarFp.paymentMethodsControllerGetPaymentMethods(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PaymentMethodsApi - object-oriented interface
 * @export
 * @class PaymentMethodsApi
 * @extends {BaseAPI}
 */
export class PaymentMethodsApi extends BaseAPI {
  /**
   *
   * @summary Create customer bank payment method
   * @param {PaymentMethodCreateBankDto} paymentMethodCreateBankDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentMethodsApi
   */
  public paymentMethodsControllerCreateBank(paymentMethodCreateBankDto: PaymentMethodCreateBankDto, options?: any) {
    return PaymentMethodsApiFp(this.configuration)
      .paymentMethodsControllerCreateBank(paymentMethodCreateBankDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete customer payment method
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentMethodsApi
   */
  public paymentMethodsControllerDeletePaymentMethod(id: string, options?: any) {
    return PaymentMethodsApiFp(this.configuration)
      .paymentMethodsControllerDeletePaymentMethod(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve Payment Methods
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentMethodsApi
   */
  public paymentMethodsControllerGetPaymentMethod(id: string, options?: any) {
    return PaymentMethodsApiFp(this.configuration)
      .paymentMethodsControllerGetPaymentMethod(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many Payment Methods
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PaymentMethodsApi
   */
  public paymentMethodsControllerGetPaymentMethods(options?: any) {
    return PaymentMethodsApiFp(this.configuration)
      .paymentMethodsControllerGetPaymentMethods(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PropertiesApi - axios parameter creator
 * @export
 */
export const PropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve historical brick price
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetDividendsChart: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('propertiesControllerGetDividendsChart', 'id', id);
      const localVarPath = `/properties/{id}/brick-price-chart`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve historical monthly dividends distribution
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetMonthlyDividendsChartData: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('propertiesControllerGetMonthlyDividendsChartData', 'id', id);
      const localVarPath = `/properties/{id}/monthly-dividends-chart`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve one Property
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetProperties: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('propertiesControllerGetProperties', 'id', id);
      const localVarPath = `/properties/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many Property
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetProperty: async (
      cursor?: string,
      take?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/properties`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (take !== undefined) {
        localVarQueryParameter['take'] = take;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve property advantages
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetPropertyAdvantages: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('propertiesControllerGetPropertyAdvantages', 'id', id);
      const localVarPath = `/properties/{id}/advantages`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many property dividends
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetPropertyDividends: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('propertiesControllerGetPropertyDividends', 'id', id);
      const localVarPath = `/properties/{id}/dividends`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many Property Monthly Updates
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetPropertyMonthlyUpdates: async (id: string, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('propertiesControllerGetPropertyMonthlyUpdates', 'id', id);
      const localVarPath = `/properties/{id}/monthly-updates`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PropertiesApi - functional programming interface
 * @export
 */
export const PropertiesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PropertiesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve historical brick price
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerGetDividendsChart(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyChartDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerGetDividendsChart(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve historical monthly dividends distribution
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerGetMonthlyDividendsChartData(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyChartDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerGetMonthlyDividendsChartData(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve one Property
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerGetProperties(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerGetProperties(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many Property
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerGetProperty(
      cursor?: string,
      take?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerGetProperty(cursor, take, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve property advantages
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerGetPropertyAdvantages(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyAdvantagesDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerGetPropertyAdvantages(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many property dividends
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerGetPropertyDividends(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyDividendsDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerGetPropertyDividends(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many Property Monthly Updates
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async propertiesControllerGetPropertyMonthlyUpdates(
      id: string,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertyMonthlyUpdateDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesControllerGetPropertyMonthlyUpdates(
        id,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PropertiesApi - factory interface
 * @export
 */
export const PropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PropertiesApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve historical brick price
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetDividendsChart(id: string, options?: any): AxiosPromise<PropertyChartDto> {
      return localVarFp.propertiesControllerGetDividendsChart(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve historical monthly dividends distribution
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetMonthlyDividendsChartData(id: string, options?: any): AxiosPromise<PropertyChartDto> {
      return localVarFp
        .propertiesControllerGetMonthlyDividendsChartData(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve one Property
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetProperties(id: string, options?: any): AxiosPromise<PropertyDto> {
      return localVarFp.propertiesControllerGetProperties(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many Property
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetProperty(cursor?: string, take?: number, options?: any): AxiosPromise<PropertyDto> {
      return localVarFp
        .propertiesControllerGetProperty(cursor, take, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve property advantages
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetPropertyAdvantages(id: string, options?: any): AxiosPromise<PropertyAdvantagesDto> {
      return localVarFp
        .propertiesControllerGetPropertyAdvantages(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many property dividends
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetPropertyDividends(id: string, options?: any): AxiosPromise<PropertyDividendsDto> {
      return localVarFp
        .propertiesControllerGetPropertyDividends(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many Property Monthly Updates
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    propertiesControllerGetPropertyMonthlyUpdates(id: string, options?: any): AxiosPromise<PropertyMonthlyUpdateDto> {
      return localVarFp
        .propertiesControllerGetPropertyMonthlyUpdates(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PropertiesApi - object-oriented interface
 * @export
 * @class PropertiesApi
 * @extends {BaseAPI}
 */
export class PropertiesApi extends BaseAPI {
  /**
   *
   * @summary Retrieve historical brick price
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertiesApi
   */
  public propertiesControllerGetDividendsChart(id: string, options?: any) {
    return PropertiesApiFp(this.configuration)
      .propertiesControllerGetDividendsChart(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve historical monthly dividends distribution
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertiesApi
   */
  public propertiesControllerGetMonthlyDividendsChartData(id: string, options?: any) {
    return PropertiesApiFp(this.configuration)
      .propertiesControllerGetMonthlyDividendsChartData(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve one Property
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertiesApi
   */
  public propertiesControllerGetProperties(id: string, options?: any) {
    return PropertiesApiFp(this.configuration)
      .propertiesControllerGetProperties(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many Property
   * @param {string} [cursor]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertiesApi
   */
  public propertiesControllerGetProperty(cursor?: string, take?: number, options?: any) {
    return PropertiesApiFp(this.configuration)
      .propertiesControllerGetProperty(cursor, take, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve property advantages
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertiesApi
   */
  public propertiesControllerGetPropertyAdvantages(id: string, options?: any) {
    return PropertiesApiFp(this.configuration)
      .propertiesControllerGetPropertyAdvantages(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many property dividends
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertiesApi
   */
  public propertiesControllerGetPropertyDividends(id: string, options?: any) {
    return PropertiesApiFp(this.configuration)
      .propertiesControllerGetPropertyDividends(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many Property Monthly Updates
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PropertiesApi
   */
  public propertiesControllerGetPropertyMonthlyUpdates(id: string, options?: any) {
    return PropertiesApiFp(this.configuration)
      .propertiesControllerGetPropertyMonthlyUpdates(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * StripeApi - axios parameter creator
 * @export
 */
export const StripeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Handle webhook | TEST ONLY
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerWebhook: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/stripe/webhook`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StripeApi - functional programming interface
 * @export
 */
export const StripeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = StripeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Handle webhook | TEST ONLY
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stripeControllerWebhook(
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stripeControllerWebhook(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * StripeApi - factory interface
 * @export
 */
export const StripeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = StripeApiFp(configuration);
  return {
    /**
     *
     * @summary Handle webhook | TEST ONLY
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeControllerWebhook(options?: any): AxiosPromise<void> {
      return localVarFp.stripeControllerWebhook(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * StripeApi - object-oriented interface
 * @export
 * @class StripeApi
 * @extends {BaseAPI}
 */
export class StripeApi extends BaseAPI {
  /**
   *
   * @summary Handle webhook | TEST ONLY
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StripeApi
   */
  public stripeControllerWebhook(options?: any) {
    return StripeApiFp(this.configuration)
      .stripeControllerWebhook(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WalletRequestsApi - axios parameter creator
 * @export
 */
export const WalletRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create wallet request by bank account
     * @param {WalletRequestBankDto} walletRequestBankDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRequestsControllerCreateWalletTransactionsByBank: async (
      walletRequestBankDto: WalletRequestBankDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'walletRequestBankDto' is not null or undefined
      assertParamExists(
        'walletRequestsControllerCreateWalletTransactionsByBank',
        'walletRequestBankDto',
        walletRequestBankDto,
      );
      const localVarPath = `/wallet-requests/bank`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(walletRequestBankDto, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create wallet request for withdrawal
     * @param {WalletRequestWithdrawalDto} walletRequestWithdrawalDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRequestsControllerCreateWalletTransactionsWithdrawal: async (
      walletRequestWithdrawalDto: WalletRequestWithdrawalDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'walletRequestWithdrawalDto' is not null or undefined
      assertParamExists(
        'walletRequestsControllerCreateWalletTransactionsWithdrawal',
        'walletRequestWithdrawalDto',
        walletRequestWithdrawalDto,
      );
      const localVarPath = `/wallet-requests/withdrawal`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        walletRequestWithdrawalDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Retrieve many wallet requests
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRequestsControllerGetWalletRequests: async (
      cursor?: string,
      take?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/wallet-requests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (take !== undefined) {
        localVarQueryParameter['take'] = take;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WalletRequestsApi - functional programming interface
 * @export
 */
export const WalletRequestsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WalletRequestsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create wallet request by bank account
     * @param {WalletRequestBankDto} walletRequestBankDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async walletRequestsControllerCreateWalletTransactionsByBank(
      walletRequestBankDto: WalletRequestBankDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletRequestDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.walletRequestsControllerCreateWalletTransactionsByBank(
        walletRequestBankDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Create wallet request for withdrawal
     * @param {WalletRequestWithdrawalDto} walletRequestWithdrawalDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async walletRequestsControllerCreateWalletTransactionsWithdrawal(
      walletRequestWithdrawalDto: WalletRequestWithdrawalDto,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletRequestDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.walletRequestsControllerCreateWalletTransactionsWithdrawal(
        walletRequestWithdrawalDto,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Retrieve many wallet requests
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async walletRequestsControllerGetWalletRequests(
      cursor?: string,
      take?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletRequestResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.walletRequestsControllerGetWalletRequests(
        cursor,
        take,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * WalletRequestsApi - factory interface
 * @export
 */
export const WalletRequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WalletRequestsApiFp(configuration);
  return {
    /**
     *
     * @summary Create wallet request by bank account
     * @param {WalletRequestBankDto} walletRequestBankDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRequestsControllerCreateWalletTransactionsByBank(
      walletRequestBankDto: WalletRequestBankDto,
      options?: any,
    ): AxiosPromise<WalletRequestDto> {
      return localVarFp
        .walletRequestsControllerCreateWalletTransactionsByBank(walletRequestBankDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create wallet request for withdrawal
     * @param {WalletRequestWithdrawalDto} walletRequestWithdrawalDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRequestsControllerCreateWalletTransactionsWithdrawal(
      walletRequestWithdrawalDto: WalletRequestWithdrawalDto,
      options?: any,
    ): AxiosPromise<WalletRequestDto> {
      return localVarFp
        .walletRequestsControllerCreateWalletTransactionsWithdrawal(walletRequestWithdrawalDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Retrieve many wallet requests
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletRequestsControllerGetWalletRequests(
      cursor?: string,
      take?: number,
      options?: any,
    ): AxiosPromise<WalletRequestResDto> {
      return localVarFp
        .walletRequestsControllerGetWalletRequests(cursor, take, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WalletRequestsApi - object-oriented interface
 * @export
 * @class WalletRequestsApi
 * @extends {BaseAPI}
 */
export class WalletRequestsApi extends BaseAPI {
  /**
   *
   * @summary Create wallet request by bank account
   * @param {WalletRequestBankDto} walletRequestBankDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletRequestsApi
   */
  public walletRequestsControllerCreateWalletTransactionsByBank(
    walletRequestBankDto: WalletRequestBankDto,
    options?: any,
  ) {
    return WalletRequestsApiFp(this.configuration)
      .walletRequestsControllerCreateWalletTransactionsByBank(walletRequestBankDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create wallet request for withdrawal
   * @param {WalletRequestWithdrawalDto} walletRequestWithdrawalDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletRequestsApi
   */
  public walletRequestsControllerCreateWalletTransactionsWithdrawal(
    walletRequestWithdrawalDto: WalletRequestWithdrawalDto,
    options?: any,
  ) {
    return WalletRequestsApiFp(this.configuration)
      .walletRequestsControllerCreateWalletTransactionsWithdrawal(walletRequestWithdrawalDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Retrieve many wallet requests
   * @param {string} [cursor]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletRequestsApi
   */
  public walletRequestsControllerGetWalletRequests(cursor?: string, take?: number, options?: any) {
    return WalletRequestsApiFp(this.configuration)
      .walletRequestsControllerGetWalletRequests(cursor, take, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * WalletTransactionsApi - axios parameter creator
 * @export
 */
export const WalletTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Retrieve many Wallet Transactions
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactionsControllerGetWalletTransactions: async (
      cursor?: string,
      take?: number,
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/wallet-transactions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (cursor !== undefined) {
        localVarQueryParameter['cursor'] = cursor;
      }

      if (take !== undefined) {
        localVarQueryParameter['take'] = take;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * WalletTransactionsApi - functional programming interface
 * @export
 */
export const WalletTransactionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = WalletTransactionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Retrieve many Wallet Transactions
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async walletTransactionsControllerGetWalletTransactions(
      cursor?: string,
      take?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletTransactionResDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.walletTransactionsControllerGetWalletTransactions(
        cursor,
        take,
        options,
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * WalletTransactionsApi - factory interface
 * @export
 */
export const WalletTransactionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = WalletTransactionsApiFp(configuration);
  return {
    /**
     *
     * @summary Retrieve many Wallet Transactions
     * @param {string} [cursor]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletTransactionsControllerGetWalletTransactions(
      cursor?: string,
      take?: number,
      options?: any,
    ): AxiosPromise<WalletTransactionResDto> {
      return localVarFp
        .walletTransactionsControllerGetWalletTransactions(cursor, take, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * WalletTransactionsApi - object-oriented interface
 * @export
 * @class WalletTransactionsApi
 * @extends {BaseAPI}
 */
export class WalletTransactionsApi extends BaseAPI {
  /**
   *
   * @summary Retrieve many Wallet Transactions
   * @param {string} [cursor]
   * @param {number} [take]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletTransactionsApi
   */
  public walletTransactionsControllerGetWalletTransactions(cursor?: string, take?: number, options?: any) {
    return WalletTransactionsApiFp(this.configuration)
      .walletTransactionsControllerGetWalletTransactions(cursor, take, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
